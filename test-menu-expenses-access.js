/**
 * Test de validation de l'acc√®s √† la page d√©penses depuis le menu
 */

const fs = require('fs');
const path = require('path');

console.log('üîó VALIDATION ACC√àS PAGE D√âPENSES DEPUIS LE MENU');
console.log('=' .repeat(55));
console.log('');

const layoutPath = path.join(__dirname, 'src', 'js', 'layout.js');

if (!fs.existsSync(layoutPath)) {
    console.log('‚ùå Fichier layout.js non trouv√©');
    process.exit(1);
}

const layoutContent = fs.readFileSync(layoutPath, 'utf8');

let testsTotal = 0;
let testsReussis = 0;

function runTest(testName, testFunction) {
    testsTotal++;
    console.log(`üß™ Test: ${testName}`);
    
    try {
        const result = testFunction();
        if (result) {
            console.log(`‚úÖ R√âUSSI: ${testName}\n`);
            testsReussis++;
        } else {
            console.log(`‚ùå √âCHOU√â: ${testName}\n`);
        }
    } catch (error) {
        console.log(`‚ùå ERREUR: ${testName} - ${error.message}\n`);
    }
}

// Test 1: V√©rifier que l'entr√©e expenses existe dans les liens
runTest('Entr√©e expenses d√©finie dans les liens', () => {
    const hasExpensesEntry = layoutContent.includes('expenses: `');
    const hasExpensesHref = layoutContent.includes('href="expenses.html"');
    const hasExpensesIcon = layoutContent.includes('indigo-500');
    const hasExpensesTranslation = layoutContent.includes('main_menu_expenses');
    
    if (hasExpensesEntry && hasExpensesHref && hasExpensesIcon && hasExpensesTranslation) {
        console.log('  ‚úÖ Entr√©e expenses compl√®te avec lien, ic√¥ne et traduction');
        return true;
    } else {
        console.log(`  ‚ùå Entr√©e incompl√®te: entry=${hasExpensesEntry}, href=${hasExpensesHref}, icon=${hasExpensesIcon}, translation=${hasExpensesTranslation}`);
        return false;
    }
});

// Test 2: V√©rifier que expenses est inclus dans la construction du menu pour propri√©taires
runTest('Expenses inclus dans le menu propri√©taire', () => {
    const hasExpensesInMenu = layoutContent.includes('links.expenses +');
    const isInProprietaireSection = layoutContent.includes("user.role === 'Propri√©taire'") && 
                                   layoutContent.includes('links.expenses');
    
    if (hasExpensesInMenu && isInProprietaireSection) {
        console.log('  ‚úÖ Expenses correctement inclus dans le menu propri√©taire');
        return true;
    } else {
        console.log(`  ‚ùå Inclusion incorrecte: inMenu=${hasExpensesInMenu}, inProprietaire=${isInProprietaireSection}`);
        return false;
    }
});

// Test 3: V√©rifier l'ordre des √©l√©ments dans le menu
runTest('Ordre correct des √©l√©ments de menu', () => {
    // V√©rifier que expenses vient apr√®s returns et avant products
    const menuConstruction = layoutContent.match(/navHTML \+= links\..*?;/g);
    
    if (!menuConstruction) {
        console.log('  ‚ùå Construction du menu non trouv√©e');
        return false;
    }
    
    const menuOrder = menuConstruction.join(' ');
    const hasCorrectOrder = menuOrder.includes('links.returns') && 
                           menuOrder.includes('links.expenses') && 
                           menuOrder.includes('links.products') &&
                           menuOrder.indexOf('links.returns') < menuOrder.indexOf('links.expenses') &&
                           menuOrder.indexOf('links.expenses') < menuOrder.indexOf('links.products');
    
    if (hasCorrectOrder) {
        console.log('  ‚úÖ Ordre correct: returns ‚Üí expenses ‚Üí products');
        return true;
    } else {
        console.log('  ‚ùå Ordre incorrect dans la construction du menu');
        return false;
    }
});

// Test 4: V√©rifier que le fichier expenses.html existe
runTest('Fichier expenses.html accessible', () => {
    const expensesHtmlPath = path.join(__dirname, 'src', 'expenses.html');
    
    if (fs.existsSync(expensesHtmlPath)) {
        console.log('  ‚úÖ Fichier expenses.html existe et est accessible');
        return true;
    } else {
        console.log('  ‚ùå Fichier expenses.html non trouv√©');
        return false;
    }
});

// Test 5: V√©rifier la coh√©rence des traductions
runTest('Traductions coh√©rentes pour le menu', () => {
    const frPath = path.join(__dirname, 'src', 'locales', 'fr.json');
    const arPath = path.join(__dirname, 'src', 'locales', 'ar.json');
    
    let frHasTranslation = false;
    let arHasTranslation = false;
    
    if (fs.existsSync(frPath)) {
        const frContent = fs.readFileSync(frPath, 'utf8');
        frHasTranslation = frContent.includes('"main_menu_expenses"');
    }
    
    if (fs.existsSync(arPath)) {
        const arContent = fs.readFileSync(arPath, 'utf8');
        arHasTranslation = arContent.includes('"main_menu_expenses"');
    }
    
    if (frHasTranslation && arHasTranslation) {
        console.log('  ‚úÖ Traductions pr√©sentes en fran√ßais et arabe');
        return true;
    } else {
        console.log(`  ‚ùå Traductions manquantes: fr=${frHasTranslation}, ar=${arHasTranslation}`);
        return false;
    }
});

// Test 6: V√©rifier la structure du lien expenses
runTest('Structure du lien expenses correcte', () => {
    // Extraire la section expenses
    const expensesMatch = layoutContent.match(/expenses: `[\s\S]*?`,/);
    
    if (!expensesMatch) {
        console.log('  ‚ùå Section expenses non trouv√©e');
        return false;
    }
    
    const expensesSection = expensesMatch[0];
    
    const hasCorrectClass = expensesSection.includes('nav-link group flex items-center');
    const hasHoverEffect = expensesSection.includes('hover:bg-gradient-to-r');
    const hasIcon = expensesSection.includes('svg');
    const hasSpan = expensesSection.includes('<span>');
    
    if (hasCorrectClass && hasHoverEffect && hasIcon && hasSpan) {
        console.log('  ‚úÖ Structure du lien expenses compl√®te et correcte');
        return true;
    } else {
        console.log(`  ‚ùå Structure incompl√®te: class=${hasCorrectClass}, hover=${hasHoverEffect}, icon=${hasIcon}, span=${hasSpan}`);
        return false;
    }
});

// Test 7: V√©rifier que expenses n'est accessible qu'aux propri√©taires
runTest('Acc√®s expenses limit√© aux propri√©taires', () => {
    // V√©rifier que expenses est dans la section propri√©taire uniquement
    const proprietaireSection = layoutContent.match(/if \(user && user\.role === 'Propri√©taire'\) \{[\s\S]*?\}/g);
    
    if (!proprietaireSection) {
        console.log('  ‚ùå Section propri√©taire non trouv√©e');
        return false;
    }
    
    const proprietaireSectionText = proprietaireSection.join(' ');
    const expensesInProprietaire = proprietaireSectionText.includes('links.expenses');
    const expensesNotInVendeur = !layoutContent.includes('navHTML += links.seller_history + links.expenses');
    
    if (expensesInProprietaire && expensesNotInVendeur) {
        console.log('  ‚úÖ Acc√®s expenses correctement limit√© aux propri√©taires');
        return true;
    } else {
        console.log(`  ‚ùå Acc√®s mal configur√©: inProprietaire=${expensesInProprietaire}, notInVendeur=${expensesNotInVendeur}`);
        return false;
    }
});

// R√©sultats finaux
console.log('=' .repeat(55));
console.log('üìä R√âSULTATS DE LA VALIDATION');
console.log('=' .repeat(55));
console.log(`Total des tests: ${testsTotal}`);
console.log(`Tests r√©ussis: ${testsReussis} ‚úÖ`);
console.log(`Tests √©chou√©s: ${testsTotal - testsReussis} ‚ùå`);
console.log(`Taux de r√©ussite: ${Math.round((testsReussis / testsTotal) * 100)}%`);
console.log('');

if (testsReussis === testsTotal) {
    console.log('üéâ ACC√àS PAGE D√âPENSES PARFAITEMENT CONFIGUR√â !');
    console.log('');
    console.log('‚úÖ PROBL√àME R√âSOLU:');
    console.log('‚ùå AVANT: Page d√©penses inaccessible depuis le menu');
    console.log('‚úÖ APR√àS: Lien d√©penses fonctionnel dans le menu propri√©taire');
    console.log('');
    console.log('üîß CORRECTIONS APPORT√âES:');
    console.log('‚Ä¢ Ajout de links.expenses dans la construction du menu');
    console.log('‚Ä¢ Positionnement correct apr√®s returns et avant products');
    console.log('‚Ä¢ Acc√®s limit√© aux propri√©taires uniquement');
    console.log('‚Ä¢ Structure de lien compl√®te avec ic√¥ne et traductions');
    console.log('‚Ä¢ Coh√©rence avec le design existant');
    console.log('');
    console.log('üéØ NAVIGATION COMPL√àTE:');
    console.log('1. üè† Dashboard (Propri√©taire)');
    console.log('2. üí∞ Caisse (Tous)');
    console.log('3. üîÑ Retours (Tous)');
    console.log('4. üí∏ D√©penses (Propri√©taire) ‚Üê NOUVEAU');
    console.log('5. üì¶ Produits (Propri√©taire)');
    console.log('6. ‚öôÔ∏è Autres fonctions (Propri√©taire)');
    console.log('');
    console.log('üîÑ POUR TESTER:');
    console.log('1. Lancer l\'application: npm start');
    console.log('2. Se connecter en tant que Propri√©taire');
    console.log('3. V√©rifier la pr√©sence du lien "D√©penses" dans le menu');
    console.log('4. Cliquer sur "D√©penses" pour acc√©der √† la page');
    console.log('5. Confirmer que la page se charge correctement');
    console.log('');
    console.log('‚úÖ Le lien vers la page d√©penses est maintenant accessible !');
} else {
    console.log('‚ö†Ô∏è CONFIGURATION INCOMPL√àTE');
    console.log(`‚ùå ${testsTotal - testsReussis} test(s) ont √©chou√©`);
    console.log('üí° Veuillez v√©rifier les probl√®mes identifi√©s ci-dessus');
}

console.log('');
console.log('üí° INFORMATIONS IMPORTANTES:');
console.log('‚Ä¢ La page d√©penses est accessible uniquement aux propri√©taires');
console.log('‚Ä¢ Le lien appara√Æt entre "Retours" et "Produits" dans le menu');
console.log('‚Ä¢ L\'ic√¥ne utilise la couleur indigo pour se distinguer');
console.log('‚Ä¢ Les traductions sont disponibles en fran√ßais et arabe');
console.log('‚Ä¢ La structure respecte le design system existant');
