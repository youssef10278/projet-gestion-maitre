/**
 * Script de migration des donn√©es depuis une version ant√©rieure
 * Convertit l'ancienne base de donn√©es en format JSON pour import
 */

const Database = require('better-sqlite3');
const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üîÑ === SCRIPT DE MIGRATION GESTIONPRO ===\n');

// Chemin vers l'ancienne base de donn√©es
const oldDbPath = path.join(os.homedir(), 'AppData', 'Roaming', 'GestionPro', 'database.db');
const backupPath = path.join(os.homedir(), 'Desktop', 'migration-gestionpro.json');

console.log('üìÅ Chemins:');
console.log(`   Ancienne DB: ${oldDbPath}`);
console.log(`   Fichier export: ${backupPath}`);
console.log('');

// V√©rifier que l'ancienne base existe
if (!fs.existsSync(oldDbPath)) {
    console.log('‚ùå ERREUR: Ancienne base de donn√©es non trouv√©e');
    console.log('   V√©rifiez que GestionPro √©tait install√© et utilis√©');
    console.log('   Chemin attendu:', oldDbPath);
    process.exit(1);
}

try {
    console.log('üîç Connexion √† l\'ancienne base de donn√©es...');
    const db = Database(oldDbPath, { readonly: true });
    
    const exportData = {
        metadata: {
            exportDate: new Date().toISOString(),
            version: '2.1.0',
            source: 'GestionPro Migration Script',
            migrationFrom: 'v2.0.0 ou ant√©rieure'
        }
    };

    console.log('üì¶ Extraction des donn√©es...');

    // Extraction des produits
    try {
        const products = db.prepare('SELECT * FROM products').all();
        exportData.products = products;
        console.log(`   ‚úÖ Produits: ${products.length} trouv√©s`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è Produits: Erreur lors de l\'extraction');
        exportData.products = [];
    }

    // Extraction des clients
    try {
        const clients = db.prepare('SELECT * FROM clients').all();
        exportData.clients = clients;
        console.log(`   ‚úÖ Clients: ${clients.length} trouv√©s`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è Clients: Erreur lors de l\'extraction');
        exportData.clients = [];
    }

    // Extraction des ventes
    try {
        const sales = db.prepare('SELECT * FROM sales').all();
        exportData.sales = sales;
        console.log(`   ‚úÖ Ventes: ${sales.length} trouv√©es`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è Ventes: Erreur lors de l\'extraction');
        exportData.sales = [];
    }

    // Extraction des √©l√©ments de vente
    try {
        const saleItems = db.prepare('SELECT * FROM sale_items').all();
        exportData.saleItems = saleItems;
        console.log(`   ‚úÖ √âl√©ments de vente: ${saleItems.length} trouv√©s`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è √âl√©ments de vente: Erreur lors de l\'extraction');
        exportData.saleItems = [];
    }

    // Extraction des factures
    try {
        const invoices = db.prepare('SELECT * FROM invoices').all();
        exportData.invoices = invoices;
        console.log(`   ‚úÖ Factures: ${invoices.length} trouv√©es`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è Factures: Table non trouv√©e (normal pour anciennes versions)');
        exportData.invoices = [];
    }

    // Extraction des √©l√©ments de facture
    try {
        const invoiceItems = db.prepare('SELECT * FROM invoice_items').all();
        exportData.invoiceItems = invoiceItems;
        console.log(`   ‚úÖ √âl√©ments de facture: ${invoiceItems.length} trouv√©s`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è √âl√©ments de facture: Table non trouv√©e (normal pour anciennes versions)');
        exportData.invoiceItems = [];
    }

    // Extraction des param√®tres
    try {
        const settings = db.prepare('SELECT * FROM settings').all();
        exportData.settings = settings;
        console.log(`   ‚úÖ Param√®tres: ${settings.length} trouv√©s`);
    } catch (error) {
        console.log('   ‚ö†Ô∏è Param√®tres: Erreur lors de l\'extraction');
        exportData.settings = [];
    }

    // Fermer la connexion
    db.close();

    console.log('');
    console.log('üíæ G√©n√©ration du fichier de migration...');

    // √âcrire le fichier JSON
    fs.writeFileSync(backupPath, JSON.stringify(exportData, null, 2));

    const fileSize = (fs.statSync(backupPath).size / 1024 / 1024).toFixed(2);
    console.log(`   ‚úÖ Fichier cr√©√©: ${backupPath}`);
    console.log(`   üìè Taille: ${fileSize} MB`);

    console.log('');
    console.log('üéâ === MIGRATION R√âUSSIE ===');
    console.log('');
    console.log('üìã √âTAPES SUIVANTES:');
    console.log('');
    console.log('1. üöÄ INSTALLER GestionPro v2.1.0');
    console.log('   - Lancer "GestionPro Setup 2.1.0.exe"');
    console.log('   - Suivre l\'assistant d\'installation');
    console.log('');
    console.log('2. üì• IMPORTER LES DONN√âES');
    console.log('   - Ouvrir GestionPro v2.1.0');
    console.log('   - Aller dans "Sauvegarde"');
    console.log('   - Glisser le fichier: migration-gestionpro.json');
    console.log('   - Choisir "Remplacer toutes les donn√©es"');
    console.log('   - Cliquer "D√©marrer l\'Import"');
    console.log('');
    console.log('3. ‚úÖ V√âRIFIER');
    console.log('   - Tous les produits pr√©sents');
    console.log('   - Tous les clients pr√©sents');
    console.log('   - Historique des ventes intact');
    console.log('   - Param√®tres conserv√©s');
    console.log('');
    console.log('üí° Le fichier migration-gestionpro.json est sur votre Bureau');
    console.log('üí° Conservez-le comme sauvegarde de s√©curit√©');

} catch (error) {
    console.error('‚ùå ERREUR lors de la migration:', error.message);
    console.log('');
    console.log('üîß SOLUTIONS POSSIBLES:');
    console.log('   1. V√©rifier que GestionPro est ferm√©');
    console.log('   2. V√©rifier les permissions du fichier database.db');
    console.log('   3. Essayer de copier database.db sur le Bureau d\'abord');
    console.log('   4. Contacter le support technique');
    process.exit(1);
}
