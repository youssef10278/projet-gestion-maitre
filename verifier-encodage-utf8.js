/**
 * V√©rificateur d'encodage UTF-8 pour tous les fichiers du projet
 * Analyse l'encodage des fichiers sources et d√©tecte les probl√®mes
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç === V√âRIFICATION ENCODAGE UTF-8 ===\n');

// Configuration
const projectRoot = __dirname;
const filesToCheck = [
    // Fichiers HTML
    'src/index.html',
    'src/caisse.html',
    'src/products.html',
    'src/clients.html',
    'src/settings.html',
    'src/backup.html',
    
    // Fichiers JavaScript
    'src/js/caisse.js',
    'src/js/products.js',
    'src/js/backup.js',
    'src/js/layout.js',
    'src/js/i18n.js',
    'main.js',
    'preload.js',
    'database.js',
    
    // Fichiers de traduction
    'src/locales/fr.json',
    'src/locales/ar.json',
    
    // Fichiers de configuration
    'package.json',
    '.gitignore',
    
    // Fichiers CSS
    'src/css/input.css',
    'src/css/styles.css'
];

// Fonction pour d√©tecter l'encodage d'un fichier
function detectEncoding(filePath) {
    try {
        if (!fs.existsSync(filePath)) {
            return { encoding: 'FILE_NOT_FOUND', isUTF8: false, error: 'Fichier non trouv√©' };
        }

        // Lire le fichier en tant que buffer
        const buffer = fs.readFileSync(filePath);
        
        // V√©rifier le BOM UTF-8
        const hasBOM = buffer.length >= 3 && 
                      buffer[0] === 0xEF && 
                      buffer[1] === 0xBB && 
                      buffer[2] === 0xBF;

        // Essayer de d√©coder en UTF-8
        let content;
        try {
            content = buffer.toString('utf8');
        } catch (error) {
            return { encoding: 'INVALID_UTF8', isUTF8: false, error: 'Impossible de d√©coder en UTF-8' };
        }

        // V√©rifier si le contenu re-encod√© en UTF-8 donne le m√™me buffer
        const reencoded = Buffer.from(content, 'utf8');
        const isValidUTF8 = buffer.equals(reencoded);

        // Analyser le contenu
        const stats = {
            size: buffer.length,
            lines: content.split('\n').length,
            hasAccents: /[√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ø]/i.test(content),
            hasSpecialChars: /[^\x00-\x7F]/.test(content),
            hasBOM: hasBOM
        };

        return {
            encoding: isValidUTF8 ? 'UTF-8' : 'UNKNOWN',
            isUTF8: isValidUTF8,
            stats: stats,
            content: content.substring(0, 200) // Aper√ßu
        };

    } catch (error) {
        return { encoding: 'ERROR', isUTF8: false, error: error.message };
    }
}

// Fonction pour v√©rifier un fichier sp√©cifique
function checkFile(relativePath) {
    const fullPath = path.join(projectRoot, relativePath);
    const result = detectEncoding(fullPath);
    
    console.log(`üìÑ ${relativePath}`);
    console.log(`   Chemin: ${fullPath}`);
    
    if (result.error) {
        console.log(`   ‚ùå Erreur: ${result.error}`);
        return false;
    }
    
    console.log(`   Encodage: ${result.encoding}`);
    console.log(`   UTF-8 valide: ${result.isUTF8 ? '‚úÖ OUI' : '‚ùå NON'}`);
    
    if (result.stats) {
        console.log(`   Taille: ${result.stats.size} bytes`);
        console.log(`   Lignes: ${result.stats.lines}`);
        console.log(`   BOM UTF-8: ${result.stats.hasBOM ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log(`   Caract√®res accentu√©s: ${result.stats.hasAccents ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log(`   Caract√®res sp√©ciaux: ${result.stats.hasSpecialChars ? '‚úÖ OUI' : '‚ùå NON'}`);
        
        if (result.content) {
            const preview = result.content.replace(/\n/g, '\\n').substring(0, 100);
            console.log(`   Aper√ßu: "${preview}..."`);
        }
    }
    
    console.log('');
    return result.isUTF8;
}

// V√©rification des fichiers de traduction (critique)
function checkTranslationFiles() {
    console.log('üåê === V√âRIFICATION FICHIERS DE TRADUCTION ===\n');
    
    const translationFiles = ['src/locales/fr.json', 'src/locales/ar.json'];
    let allValid = true;
    
    translationFiles.forEach(file => {
        const fullPath = path.join(projectRoot, file);
        
        if (!fs.existsSync(fullPath)) {
            console.log(`‚ùå ${file}: Fichier non trouv√©`);
            allValid = false;
            return;
        }
        
        try {
            // Lire et parser le JSON
            const content = fs.readFileSync(fullPath, 'utf8');
            const json = JSON.parse(content);
            
            console.log(`‚úÖ ${file}:`);
            console.log(`   Taille: ${content.length} caract√®res`);
            console.log(`   Cl√©s: ${Object.keys(json).length}`);
            
            // V√©rifier quelques cl√©s avec accents
            const testKeys = ['main_menu_products', 'backup_restore_title', 'export_description'];
            testKeys.forEach(key => {
                if (json[key]) {
                    console.log(`   "${key}": "${json[key].substring(0, 50)}..."`);
                }
            });
            
        } catch (error) {
            console.log(`‚ùå ${file}: Erreur - ${error.message}`);
            allValid = false;
        }
        
        console.log('');
    });
    
    return allValid;
}

// V√©rification des fichiers JavaScript avec caract√®res sp√©ciaux
function checkJavaScriptFiles() {
    console.log('üìú === V√âRIFICATION FICHIERS JAVASCRIPT ===\n');
    
    const jsFiles = [
        'src/js/caisse.js',
        'src/js/products.js',
        'src/js/backup.js',
        'main.js',
        'database.js'
    ];
    
    let allValid = true;
    
    jsFiles.forEach(file => {
        const result = checkFile(file);
        if (!result) allValid = false;
    });
    
    return allValid;
}

// V√©rification des fichiers HTML
function checkHTMLFiles() {
    console.log('üåê === V√âRIFICATION FICHIERS HTML ===\n');
    
    const htmlFiles = [
        'src/index.html',
        'src/caisse.html',
        'src/backup.html'
    ];
    
    let allValid = true;
    
    htmlFiles.forEach(file => {
        const result = checkFile(file);
        if (!result) allValid = false;
    });
    
    return allValid;
}

// Test de caract√®res sp√©ciaux
function testSpecialCharacters() {
    console.log('üî§ === TEST CARACT√àRES SP√âCIAUX ===\n');
    
    const testStrings = [
        'Fran√ßais: √©√†√ß√π√¥√Æ',
        'Arabe: ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
        'Symboles: ‚Ç¨¬£¬•¬©¬Æ‚Ñ¢',
        'Codes-barres: CODE:xyz789',
        'Accents: caf√©, na√Øve, co√ªter'
    ];
    
    testStrings.forEach(testStr => {
        console.log(`Test: "${testStr}"`);
        
        // Encoder en UTF-8
        const buffer = Buffer.from(testStr, 'utf8');
        console.log(`   UTF-8 bytes: [${Array.from(buffer).map(b => '0x' + b.toString(16).toUpperCase()).join(', ')}]`);
        
        // D√©coder et v√©rifier
        const decoded = buffer.toString('utf8');
        const isIdentical = testStr === decoded;
        console.log(`   D√©codage: "${decoded}"`);
        console.log(`   Identique: ${isIdentical ? '‚úÖ OUI' : '‚ùå NON'}`);
        console.log('');
    });
}

// V√©rification de l'environnement syst√®me
function checkSystemEnvironment() {
    console.log('üíª === ENVIRONNEMENT SYST√àME ===\n');
    
    console.log(`Node.js version: ${process.version}`);
    console.log(`Plateforme: ${process.platform}`);
    console.log(`Architecture: ${process.arch}`);
    console.log(`Encodage par d√©faut: ${process.stdout.encoding || 'utf8'}`);
    
    // Variables d'environnement li√©es √† l'encodage
    const envVars = ['LANG', 'LC_ALL', 'LC_CTYPE', 'CHCP'];
    envVars.forEach(varName => {
        const value = process.env[varName];
        console.log(`${varName}: ${value || 'Non d√©finie'}`);
    });
    
    console.log('');
}

// Fonction principale
function main() {
    console.log('üéØ V√©rification de l\'encodage UTF-8 de tous les fichiers du projet\n');
    
    // V√©rifier l'environnement
    checkSystemEnvironment();
    
    // Test des caract√®res sp√©ciaux
    testSpecialCharacters();
    
    // V√©rifier les fichiers par cat√©gorie
    const translationsOK = checkTranslationFiles();
    const jsFilesOK = checkJavaScriptFiles();
    const htmlFilesOK = checkHTMLFiles();
    
    // V√©rification compl√®te de tous les fichiers
    console.log('üìã === V√âRIFICATION COMPL√àTE ===\n');
    
    let totalFiles = 0;
    let validFiles = 0;
    
    filesToCheck.forEach(file => {
        totalFiles++;
        const isValid = checkFile(file);
        if (isValid) validFiles++;
    });
    
    // R√©sum√© final
    console.log('üìä === R√âSUM√â FINAL ===\n');
    
    console.log(`Fichiers v√©rifi√©s: ${totalFiles}`);
    console.log(`Fichiers UTF-8 valides: ${validFiles}`);
    console.log(`Taux de r√©ussite: ${Math.round((validFiles / totalFiles) * 100)}%`);
    console.log('');
    
    if (validFiles === totalFiles) {
        console.log('üéâ TOUS LES FICHIERS SONT EN UTF-8 VALIDE !');
        console.log('‚úÖ Votre projet est correctement encod√©');
        console.log('‚úÖ Les caract√®res sp√©ciaux s\'afficheront correctement');
        console.log('‚úÖ Les traductions fran√ßaises et arabes fonctionneront');
    } else {
        console.log('‚ö†Ô∏è CERTAINS FICHIERS ONT DES PROBL√àMES D\'ENCODAGE');
        console.log(`‚ùå ${totalFiles - validFiles} fichier(s) probl√©matique(s)`);
        console.log('üîß Recommandations:');
        console.log('   ‚Ä¢ Ouvrir les fichiers probl√©matiques dans un √©diteur UTF-8');
        console.log('   ‚Ä¢ Sauvegarder explicitement en UTF-8');
        console.log('   ‚Ä¢ V√©rifier les param√®tres de votre √©diteur');
    }
    
    console.log('');
    console.log('üí° Pour tester avec des codes-barres r√©els:');
    console.log('   ‚Ä¢ Ouvrir test-encodage-codes-barres.html');
    console.log('   ‚Ä¢ Scanner des codes avec votre appareil');
    console.log('   ‚Ä¢ V√©rifier que tout s\'affiche correctement');
}

// Ex√©cution
main();
