/**
 * Test d'encodage syst√®me pour les codes-barres
 * V√©rifie l'encodage au niveau du syst√®me d'exploitation
 */

const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üîç === TEST D\'ENCODAGE SYST√àME ===\n');

// Informations syst√®me
console.log('üíª INFORMATIONS SYST√àME:');
console.log(`   OS: ${os.type()} ${os.release()}`);
console.log(`   Architecture: ${os.arch()}`);
console.log(`   Plateforme: ${os.platform()}`);
console.log(`   Locale: ${process.env.LANG || process.env.LC_ALL || 'Non d√©finie'}`);
console.log(`   Encodage par d√©faut: ${process.stdout.encoding || 'utf8'}`);
console.log('');

// Tests d'encodage
const testCodes = [
    'CODE:xyz789',
    '  abc123  ',
    'test@#$123',
    'abc\r\n123',
    'BARCODE:456789',
    '123END',
    'PROD-2024-001',
    '√©√†√ß√π123',  // Caract√®res accentu√©s
    'ÊµãËØï123',   // Caract√®res chinois
    'üîçüì±üíæ',   // Emojis
];

console.log('üß™ TESTS D\'ENCODAGE:');
console.log('');

testCodes.forEach((code, index) => {
    console.log(`Test ${index + 1}: "${code}"`);
    console.log(`   Longueur: ${code.length} caract√®res`);
    console.log(`   Taille UTF-8: ${Buffer.byteLength(code, 'utf8')} bytes`);
    console.log(`   Taille ASCII: ${Buffer.byteLength(code, 'ascii')} bytes`);
    
    // Analyse caract√®re par caract√®re
    const chars = [];
    for (let i = 0; i < code.length; i++) {
        const char = code.charAt(i);
        const charCode = code.charCodeAt(i);
        chars.push(`${char}(${charCode})`);
    }
    console.log(`   Caract√®res: [${chars.join(', ')}]`);
    
    // Encodage hexad√©cimal
    const hex = Buffer.from(code, 'utf8').toString('hex');
    console.log(`   Hex UTF-8: ${hex}`);
    
    // Test de nettoyage
    const cleaned = cleanAndValidateBarcode(code);
    console.log(`   Nettoy√©: "${cleaned}"`);
    console.log(`   Statut: ${cleaned ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);
    console.log('');
});

// Fonction de nettoyage (copie de GestionPro)
function cleanAndValidateBarcode(barcode) {
    if (!barcode) return '';
    
    // Convertir en string et nettoyer les caract√®res de base
    let cleaned = String(barcode)
        .trim()                           // Supprimer espaces d√©but/fin
        .replace(/[\r\n\t]/g, '')         // Supprimer retours chariot/tabulations
        .toUpperCase();                   // Normaliser en majuscules d'abord
    
    // Supprimer les pr√©fixes courants AVANT le nettoyage des caract√®res sp√©ciaux
    const prefixesToRemove = [
        'CODE:', 'BARCODE:', 'BC:', 'ID:', 'PROD:', 'ITEM:', 'SKU:', 'REF:'
    ];
    
    prefixesToRemove.forEach(prefix => {
        if (cleaned.startsWith(prefix)) {
            cleaned = cleaned.substring(prefix.length);
        }
    });
    
    // Supprimer les suffixes courants
    const suffixesToRemove = ['END', 'STOP', 'FIN'];
    suffixesToRemove.forEach(suffix => {
        if (cleaned.endsWith(suffix)) {
            cleaned = cleaned.substring(0, cleaned.length - suffix.length);
        }
    });
    
    // Maintenant nettoyer les caract√®res sp√©ciaux
    cleaned = cleaned.replace(/[^a-zA-Z0-9\-_]/g, '');
    
    // Validation de longueur (codes-barres standards: 4-20 caract√®res)
    if (cleaned.length < 4 || cleaned.length > 20) {
        console.warn(`   ‚ö†Ô∏è Longueur invalide: ${cleaned.length} caract√®res`);
        return '';
    }
    
    return cleaned;
}

// Test de lecture/√©criture de fichier
console.log('üìÅ TEST LECTURE/√âCRITURE FICHIER:');
const testFile = path.join(__dirname, 'test-encodage-temp.txt');

try {
    // √âcrire les codes de test dans un fichier
    const content = testCodes.join('\n');
    fs.writeFileSync(testFile, content, 'utf8');
    console.log('   ‚úÖ √âcriture fichier r√©ussie');
    
    // Relire le fichier
    const readContent = fs.readFileSync(testFile, 'utf8');
    const isIdentical = content === readContent;
    console.log(`   ‚úÖ Lecture fichier: ${isIdentical ? 'IDENTIQUE' : 'DIFF√âRENT'}`);
    
    if (!isIdentical) {
        console.log('   ‚ùå PROBL√àME D\'ENCODAGE D√âTECT√â !');
        console.log(`   Original: ${content.length} caract√®res`);
        console.log(`   Lu: ${readContent.length} caract√®res`);
    }
    
    // Nettoyer
    fs.unlinkSync(testFile);
    console.log('   üßπ Fichier temporaire supprim√©');
    
} catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
}

console.log('');

// Test des variables d'environnement
console.log('üåê VARIABLES D\'ENVIRONNEMENT:');
const envVars = ['LANG', 'LC_ALL', 'LC_CTYPE', 'CHCP', 'CODEPAGE'];
envVars.forEach(varName => {
    const value = process.env[varName];
    console.log(`   ${varName}: ${value || 'Non d√©finie'}`);
});

console.log('');

// Test de la console
console.log('üñ•Ô∏è TEST CONSOLE:');
console.log('   Encodage stdout:', process.stdout.encoding || 'utf8');
console.log('   Encodage stderr:', process.stderr.encoding || 'utf8');
console.log('   Encodage stdin:', process.stdin.encoding || 'utf8');

// Test de caract√®res sp√©ciaux dans la console
console.log('');
console.log('üî§ TEST AFFICHAGE CARACT√àRES SP√âCIAUX:');
const specialChars = [
    { name: 'Accents fran√ßais', chars: '√©√†√ß√π√¥√Æ' },
    { name: 'Caract√®res √©tendus', chars: '√±√º√ü‚Ç¨¬£' },
    { name: 'Symboles', chars: '¬©¬Æ‚Ñ¢¬∞¬±' },
    { name: 'Fl√®ches', chars: '‚Üê‚Üí‚Üë‚Üì' },
    { name: 'Bo√Ætes', chars: '‚îå‚îê‚îî‚îò‚îÇ‚îÄ' }
];

specialChars.forEach(test => {
    console.log(`   ${test.name}: ${test.chars}`);
});

console.log('');

// Recommandations
console.log('üí° RECOMMANDATIONS:');
console.log('');

if (os.platform() === 'win32') {
    console.log('   ü™ü WINDOWS D√âTECT√â:');
    console.log('   ‚Ä¢ V√©rifier que la console utilise UTF-8');
    console.log('   ‚Ä¢ Commande: chcp 65001');
    console.log('   ‚Ä¢ V√©rifier les param√®tres r√©gionaux');
    console.log('');
}

console.log('   üìã POUR TESTER AVEC SCANNER:');
console.log('   1. Ouvrir test-encodage-codes-barres.html');
console.log('   2. Scanner des codes dans les champs de test');
console.log('   3. Observer les r√©sultats d\'encodage');
console.log('   4. Comparer avec les r√©sultats attendus');
console.log('');

console.log('   üîß SI PROBL√àMES D√âTECT√âS:');
console.log('   ‚Ä¢ V√©rifier les param√®tres du scanner');
console.log('   ‚Ä¢ Tester le scanner dans un √©diteur de texte');
console.log('   ‚Ä¢ V√©rifier l\'encodage du syst√®me');
console.log('   ‚Ä¢ Mettre √† jour les pilotes du scanner');
console.log('');

// R√©sum√© final
console.log('üìä R√âSUM√â DU TEST:');
console.log('');

const validCodes = testCodes.filter(code => cleanAndValidateBarcode(code)).length;
const totalCodes = testCodes.length;

console.log(`   Codes test√©s: ${totalCodes}`);
console.log(`   Codes valides apr√®s nettoyage: ${validCodes}`);
console.log(`   Taux de r√©ussite: ${Math.round((validCodes / totalCodes) * 100)}%`);
console.log('');

if (validCodes === totalCodes) {
    console.log('üéâ TOUS LES TESTS SONT R√âUSSIS !');
    console.log('   Le syst√®me d\'encodage fonctionne correctement.');
} else {
    console.log('‚ö†Ô∏è CERTAINS CODES ONT √âT√â REJET√âS');
    console.log('   Cela peut √™tre normal selon les r√®gles de validation.');
}

console.log('');
console.log('üîç Pour des tests interactifs, ouvrez: test-encodage-codes-barres.html');
console.log('üì± Testez avec votre scanner physique pour des r√©sultats r√©els.');
console.log('');
console.log('‚úÖ Test d\'encodage syst√®me termin√©.');
