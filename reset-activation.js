const fs = require('fs');
const path = require('path');
const os = require('os');

console.log('üßπ === NETTOYAGE DES DONN√âES D\'ACTIVATION ===\n');

// Chemins des fichiers d'activation
const appDataPath = path.join(os.homedir(), 'AppData', 'Roaming', 'GestionPro');
const activationFilePath = path.join(appDataPath, 'activation.json');

// Fichiers de base de donn√©es locales
const localLicenseDb = path.join(__dirname, 'licenses.db');
const localDatabaseDb = path.join(__dirname, 'database.db');

console.log('üìÅ Chemins v√©rifi√©s:');
console.log('   - AppData:', appDataPath);
console.log('   - Activation:', activationFilePath);
console.log('   - License DB:', localLicenseDb);
console.log('   - Database DB:', localDatabaseDb);
console.log('');

let filesDeleted = 0;

// Supprimer le fichier d'activation
if (fs.existsSync(activationFilePath)) {
    try {
        fs.unlinkSync(activationFilePath);
        console.log('‚úÖ Fichier activation.json supprim√©');
        filesDeleted++;
    } catch (error) {
        console.log('‚ùå Erreur suppression activation.json:', error.message);
    }
} else {
    console.log('‚ÑπÔ∏è Fichier activation.json non trouv√©');
}

// Supprimer le dossier AppData complet si il existe
if (fs.existsSync(appDataPath)) {
    try {
        fs.rmSync(appDataPath, { recursive: true, force: true });
        console.log('‚úÖ Dossier AppData GestionPro supprim√©');
        filesDeleted++;
    } catch (error) {
        console.log('‚ùå Erreur suppression dossier AppData:', error.message);
    }
} else {
    console.log('‚ÑπÔ∏è Dossier AppData GestionPro non trouv√©');
}

// Supprimer la base de donn√©es locale de licences
if (fs.existsSync(localLicenseDb)) {
    try {
        fs.unlinkSync(localLicenseDb);
        console.log('‚úÖ Base de donn√©es licenses.db supprim√©e');
        filesDeleted++;
    } catch (error) {
        console.log('‚ùå Erreur suppression licenses.db:', error.message);
    }
} else {
    console.log('‚ÑπÔ∏è Fichier licenses.db non trouv√©');
}

// Supprimer la base de donn√©es principale locale
if (fs.existsSync(localDatabaseDb)) {
    try {
        fs.unlinkSync(localDatabaseDb);
        console.log('‚úÖ Base de donn√©es database.db supprim√©e');
        filesDeleted++;
    } catch (error) {
        console.log('‚ùå Erreur suppression database.db:', error.message);
    }
} else {
    console.log('‚ÑπÔ∏è Fichier database.db non trouv√©');
}

console.log('');
console.log(`üéØ R√©sultat: ${filesDeleted} fichier(s) supprim√©(s)`);
console.log('');
console.log('‚ú® SYST√àME R√âINITIALIS√â !');
console.log('');
console.log('üìã PROCHAINES √âTAPES:');
console.log('1. D√©marrez le serveur de licences local: cd serveur-licence && node server.js');
console.log('2. G√©n√©rez une nouvelle cl√©: cd serveur-licence && node generate-keys.js');
console.log('3. Lancez GestionPro: npm start');
console.log('4. Utilisez la cl√© g√©n√©r√©e pour l\'activation');
console.log('');
console.log('üîß Configuration actuelle: Serveur LOCAL (localhost:3000)');
