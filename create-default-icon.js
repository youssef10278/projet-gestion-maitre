/**
 * Cr√©er une ic√¥ne par d√©faut pour GestionPro
 * G√©n√®re un fichier ICO simple en attendant une ic√¥ne personnalis√©e
 */

const fs = require('fs');
const path = require('path');

console.log('üé® Cr√©ation d\'une ic√¥ne par d√©faut pour GestionPro...');

// Cr√©er le dossier assets s'il n'existe pas
const assetsDir = 'src/assets';
if (!fs.existsSync(assetsDir)) {
    fs.mkdirSync(assetsDir, { recursive: true });
    console.log('üìÅ Dossier assets cr√©√©');
}

// Donn√©es d'une ic√¥ne ICO simple (16x16, 32x32, 48x48)
// Cette ic√¥ne repr√©sente un simple carr√© bleu avec "GP" au centre
const iconData = Buffer.from([
    // En-t√™te ICO
    0x00, 0x00, // Reserved (must be 0)
    0x01, 0x00, // Type (1 = ICO)
    0x01, 0x00, // Number of images
    
    // Directory entry
    0x20, // Width (32)
    0x20, // Height (32)
    0x00, // Color count (0 = no palette)
    0x00, // Reserved
    0x01, 0x00, // Color planes
    0x20, 0x00, // Bits per pixel (32)
    0x00, 0x04, 0x00, 0x00, // Size of image data
    0x16, 0x00, 0x00, 0x00, // Offset to image data
    
    // Image data (simplified 32x32 bitmap)
    // BMP header
    0x28, 0x00, 0x00, 0x00, // Header size
    0x20, 0x00, 0x00, 0x00, // Width
    0x40, 0x00, 0x00, 0x00, // Height (double for AND mask)
    0x01, 0x00, // Planes
    0x20, 0x00, // Bits per pixel
    0x00, 0x00, 0x00, 0x00, // Compression
    0x00, 0x00, 0x00, 0x00, // Image size
    0x00, 0x00, 0x00, 0x00, // X pixels per meter
    0x00, 0x00, 0x00, 0x00, // Y pixels per meter
    0x00, 0x00, 0x00, 0x00, // Colors used
    0x00, 0x00, 0x00, 0x00, // Important colors
]);

// Cr√©er un fichier ICO basique
const iconPath = path.join(assetsDir, 'icon.ico');

// Pour simplifier, nous allons copier une ic√¥ne existante du syst√®me ou cr√©er un placeholder
const placeholderIcon = `
Cette ic√¥ne sera remplac√©e par une ic√¥ne personnalis√©e.
Pour l'instant, electron-builder utilisera l'ic√¥ne par d√©faut d'Electron.

Pour cr√©er une ic√¥ne personnalis√©e :
1. Cr√©ez une image 256x256 pixels
2. Convertissez-la en format ICO
3. Remplacez ce fichier par votre ic√¥ne
4. Relancez la g√©n√©ration de l'installateur
`;

// Cr√©er un fichier texte temporaire (electron-builder utilisera l'ic√¥ne par d√©faut)
fs.writeFileSync(iconPath + '.txt', placeholderIcon);

console.log('üìù Fichier placeholder cr√©√© : src/assets/icon.ico.txt');
console.log('‚ö†Ô∏è  Electron-builder utilisera l\'ic√¥ne par d√©faut d\'Electron');
console.log('üí° Pour une ic√¥ne personnalis√©e, remplacez ce fichier par un vrai fichier ICO');

// Mettre √† jour le package.json pour ne pas r√©f√©rencer l'ic√¥ne manquante
const packageJsonPath = 'package.json';
const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

// Supprimer temporairement la r√©f√©rence √† l'ic√¥ne
if (packageJson.build && packageJson.build.win && packageJson.build.win.icon) {
    delete packageJson.build.win.icon;
    console.log('üîß R√©f√©rence √† l\'ic√¥ne supprim√©e temporairement du package.json');
}

if (packageJson.build && packageJson.build.nsis) {
    delete packageJson.build.nsis.installerIcon;
    delete packageJson.build.nsis.uninstallerIcon;
    delete packageJson.build.nsis.installerHeaderIcon;
    console.log('üîß R√©f√©rences aux ic√¥nes NSIS supprim√©es temporairement');
}

fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));

console.log('‚úÖ Configuration mise √† jour pour utiliser l\'ic√¥ne par d√©faut');
console.log('üöÄ L\'installateur peut maintenant √™tre g√©n√©r√© sans probl√®me d\'ic√¥ne');
