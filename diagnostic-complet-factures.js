/**
 * Diagnostic complet des probl√®mes de factures
 * Analyse approfondie des deux probl√®mes persistants
 */

console.log('üîç === DIAGNOSTIC COMPLET FACTURES ===\n');

console.log('üö® PROBL√àMES PERSISTANTS IDENTIFI√âS:');
console.log('');

console.log('‚ùå PROBL√àME 1: TOTAL HT PAS √Ä JOUR');
console.log('   ‚Ä¢ Total HT ne se met pas √† jour dans les nouvelles lignes');
console.log('   ‚Ä¢ Fonctionne sur la premi√®re ligne seulement');
console.log('   ‚Ä¢ Les lignes ajout√©es dynamiquement ne r√©agissent pas');
console.log('');

console.log('‚ùå PROBL√àME 2: IMPRESSION INCOMPL√àTE');
console.log('   ‚Ä¢ Seule la premi√®re ligne s\'affiche dans le PDF');
console.log('   ‚Ä¢ Les autres lignes ne sont pas incluses');
console.log('   ‚Ä¢ Probl√®me de r√©cup√©ration des donn√©es √©diteur');
console.log('');

console.log('üîç HYPOTH√àSES √Ä V√âRIFIER:');
console.log('');

console.log('üß™ HYPOTH√àSE 1: PROBL√àME DE S√âLECTEURS CSS');
console.log('   ‚Ä¢ Les nouvelles lignes n\'ont pas la classe .invoice-item-row');
console.log('   ‚Ä¢ document.querySelectorAll(\'.invoice-item-row\') ne les trouve pas');
console.log('   ‚Ä¢ Probl√®me dans createRowHTML() ou appendChild()');
console.log('');

console.log('üß™ HYPOTH√àSE 2: PROBL√àME D\'EVENT DELEGATION');
console.log('   ‚Ä¢ Les event listeners ne s\'appliquent pas aux nouvelles lignes');
console.log('   ‚Ä¢ addEventListener sur invoiceEditor mais propagation √©choue');
console.log('   ‚Ä¢ Nouvelles lignes cr√©√©es apr√®s l\'attachement des listeners');
console.log('');

console.log('üß™ HYPOTH√àSE 3: PROBL√àME DE STRUCTURE DOM');
console.log('   ‚Ä¢ innerHTML ne cr√©e pas correctement la structure');
console.log('   ‚Ä¢ Classes CSS perdues lors de la cr√©ation dynamique');
console.log('   ‚Ä¢ √âl√©ments non attach√©s correctement au DOM');
console.log('');

console.log('üß™ HYPOTH√àSE 4: PROBL√àME DE TIMING');
console.log('   ‚Ä¢ calculateTotals() appel√©e avant que les √©l√©ments soient pr√™ts');
console.log('   ‚Ä¢ Race condition entre cr√©ation DOM et calculs');
console.log('   ‚Ä¢ Timeouts insuffisants ou mal plac√©s');
console.log('');

console.log('üß™ HYPOTH√àSE 5: PROBL√àME DE R√âCUP√âRATION DONN√âES');
console.log('   ‚Ä¢ generatePrintableInvoice() ne trouve pas toutes les lignes');
console.log('   ‚Ä¢ S√©lecteur .invoice-item-row incorrect');
console.log('   ‚Ä¢ Donn√©es filtr√©es incorrectement (description vide)');
console.log('');

console.log('üî¨ PLAN DE DIAGNOSTIC:');
console.log('');

console.log('1. üîç V√âRIFIER STRUCTURE HTML G√âN√âR√âE:');
console.log('   ‚Ä¢ Examiner createRowHTML() ligne par ligne');
console.log('   ‚Ä¢ V√©rifier que la classe .invoice-item-row est bien ajout√©e');
console.log('   ‚Ä¢ Contr√¥ler la structure compl√®te du TR g√©n√©r√©');
console.log('');

console.log('2. üîç V√âRIFIER S√âLECTEURS DOM:');
console.log('   ‚Ä¢ Tester document.querySelectorAll(\'.invoice-item-row\')');
console.log('   ‚Ä¢ Compter le nombre de lignes trouv√©es vs attendues');
console.log('   ‚Ä¢ V√©rifier que tous les √©l√©ments enfants existent');
console.log('');

console.log('3. üîç V√âRIFIER EVENT LISTENERS:');
console.log('   ‚Ä¢ Tester si les √©v√©nements se d√©clenchent sur nouvelles lignes');
console.log('   ‚Ä¢ V√©rifier la propagation des √©v√©nements');
console.log('   ‚Ä¢ Contr√¥ler que les handlers sont bien attach√©s');
console.log('');

console.log('4. üîç V√âRIFIER FONCTION calculateTotals():');
console.log('   ‚Ä¢ Ajouter logs d√©taill√©s pour chaque ligne');
console.log('   ‚Ä¢ V√©rifier que tous les √©l√©ments sont trouv√©s');
console.log('   ‚Ä¢ Contr√¥ler les valeurs r√©cup√©r√©es et calcul√©es');
console.log('');

console.log('5. üîç V√âRIFIER FONCTION generatePrintableInvoice():');
console.log('   ‚Ä¢ Ajouter logs pour chaque ligne r√©cup√©r√©e');
console.log('   ‚Ä¢ V√©rifier le filtrage des descriptions vides');
console.log('   ‚Ä¢ Contr√¥ler la construction du tableau itemsFromEditor');
console.log('');

console.log('üõ†Ô∏è CORRECTIONS POTENTIELLES:');
console.log('');

console.log('üí° SOLUTION 1: FORCER LA CLASSE CSS');
console.log('   ‚Ä¢ Ajouter explicitement la classe apr√®s cr√©ation');
console.log('   ‚Ä¢ newRow.classList.add(\'invoice-item-row\')');
console.log('   ‚Ä¢ S\'assurer que la classe est pr√©sente');
console.log('');

console.log('üí° SOLUTION 2: AM√âLIORER LES S√âLECTEURS');
console.log('   ‚Ä¢ Utiliser un s√©lecteur plus sp√©cifique');
console.log('   ‚Ä¢ tbody.querySelectorAll(\'tr\') au lieu de .invoice-item-row');
console.log('   ‚Ä¢ Filtrer manuellement les lignes valides');
console.log('');

console.log('üí° SOLUTION 3: RECR√âER LES EVENT LISTENERS');
console.log('   ‚Ä¢ R√©attacher les listeners apr√®s chaque ajout');
console.log('   ‚Ä¢ Utiliser une fonction d\'initialisation des √©v√©nements');
console.log('   ‚Ä¢ Appliquer les listeners directement sur les nouveaux √©l√©ments');
console.log('');

console.log('üí° SOLUTION 4: AM√âLIORER LE TIMING');
console.log('   ‚Ä¢ Augmenter les timeouts');
console.log('   ‚Ä¢ Utiliser requestAnimationFrame()');
console.log('   ‚Ä¢ Attendre que le DOM soit compl√®tement rendu');
console.log('');

console.log('üí° SOLUTION 5: CHANGER LA R√âCUP√âRATION DONN√âES');
console.log('   ‚Ä¢ Ne pas filtrer sur description.trim()');
console.log('   ‚Ä¢ R√©cup√©rer toutes les lignes TR du tbody');
console.log('   ‚Ä¢ Valider diff√©remment les lignes valides');
console.log('');

console.log('üß™ TESTS DE VALIDATION:');
console.log('');

console.log('üìã TEST 1: STRUCTURE DOM');
console.log('   1. Cr√©er nouvelle facture');
console.log('   2. Ajouter 3 lignes');
console.log('   3. Ouvrir DevTools ‚Üí Elements');
console.log('   4. V√©rifier que chaque TR a class="invoice-item-row"');
console.log('   5. Compter le nombre de lignes dans le DOM');
console.log('');

console.log('üìã TEST 2: S√âLECTEURS');
console.log('   1. Dans la console: document.querySelectorAll(\'.invoice-item-row\')');
console.log('   2. V√©rifier que le nombre correspond aux lignes visibles');
console.log('   3. Pour chaque ligne, v√©rifier les √©l√©ments enfants');
console.log('   4. Tester les s√©lecteurs [name="quantity"] et [name="unit_price"]');
console.log('');

console.log('üìã TEST 3: √âV√âNEMENTS');
console.log('   1. Ajouter une ligne');
console.log('   2. Saisir prix dans la nouvelle ligne');
console.log('   3. V√©rifier dans la console si √©v√©nement d√©tect√©');
console.log('   4. V√©rifier si calculateTotals() est appel√©e');
console.log('');

console.log('üìã TEST 4: CALCULS');
console.log('   1. Ajouter logs dans calculateTotals()');
console.log('   2. V√©rifier pour chaque ligne:');
console.log('      ‚Ä¢ qtyInput trouv√© et valeur correcte');
console.log('      ‚Ä¢ priceInput trouv√© et valeur correcte');
console.log('      ‚Ä¢ lineTotalElement trouv√©');
console.log('      ‚Ä¢ Calcul effectu√© et affich√©');
console.log('');

console.log('üìã TEST 5: IMPRESSION');
console.log('   1. Ajouter logs dans generatePrintableInvoice()');
console.log('   2. V√©rifier le nombre de lignes r√©cup√©r√©es');
console.log('   3. Pour chaque ligne, v√©rifier:');
console.log('      ‚Ä¢ Description r√©cup√©r√©e');
console.log('      ‚Ä¢ Quantit√© et prix r√©cup√©r√©s');
console.log('      ‚Ä¢ Ligne ajout√©e √† itemsFromEditor');
console.log('');

console.log('üéØ ACTIONS IMM√âDIATES:');
console.log('');

console.log('1. üîß AJOUTER LOGS D√âTAILL√âS');
console.log('   ‚Ä¢ Dans calculateTotals() pour chaque √©tape');
console.log('   ‚Ä¢ Dans generatePrintableInvoice() pour chaque ligne');
console.log('   ‚Ä¢ Dans les event listeners pour v√©rifier d√©clenchement');
console.log('');

console.log('2. üîß FORCER LA CLASSE CSS');
console.log('   ‚Ä¢ Ajouter newRow.classList.add(\'invoice-item-row\')');
console.log('   ‚Ä¢ S\'assurer que la classe est pr√©sente apr√®s cr√©ation');
console.log('');

console.log('3. üîß AM√âLIORER LES S√âLECTEURS');
console.log('   ‚Ä¢ Utiliser tbody.querySelectorAll(\'tr\') comme fallback');
console.log('   ‚Ä¢ Filtrer manuellement les lignes valides');
console.log('');

console.log('4. üîß TESTER AVEC DONN√âES R√âELLES');
console.log('   ‚Ä¢ Cr√©er facture avec 3 lignes');
console.log('   ‚Ä¢ Saisir donn√©es dans chaque ligne');
console.log('   ‚Ä¢ V√©rifier calculs et impression');
console.log('');

console.log('üö® PRIORIT√â ABSOLUE:');
console.log('');

console.log('üéØ PROBL√àME 1 - CALCULS:');
console.log('   ‚Ä¢ V√©rifier que .invoice-item-row est sur toutes les lignes');
console.log('   ‚Ä¢ Ajouter logs dans calculateTotals() pour debug');
console.log('   ‚Ä¢ Forcer la classe CSS si n√©cessaire');
console.log('');

console.log('üéØ PROBL√àME 2 - IMPRESSION:');
console.log('   ‚Ä¢ V√©rifier la r√©cup√©ration des lignes dans generatePrintableInvoice()');
console.log('   ‚Ä¢ Ne pas filtrer sur description.trim()');
console.log('   ‚Ä¢ R√©cup√©rer toutes les lignes du tableau');
console.log('');

console.log('üí° HYPOTH√àSE PRINCIPALE:');
console.log('   Les nouvelles lignes cr√©√©es dynamiquement n\'ont pas');
console.log('   la classe .invoice-item-row ou ne sont pas correctement');
console.log('   attach√©es au DOM, ce qui cause les deux probl√®mes.');
console.log('');

console.log('üîß SOLUTION IMM√âDIATE √Ä TESTER:');
console.log('   1. Forcer l\'ajout de la classe CSS');
console.log('   2. Am√©liorer les logs de debug');
console.log('   3. Changer les s√©lecteurs si n√©cessaire');
console.log('');

console.log('üöÄ PR√äT POUR DIAGNOSTIC ET CORRECTION !');

// Simulation de diagnostic
console.log('');
console.log('üìä SIMULATION DE DIAGNOSTIC:');
console.log('');

const simulatedIssues = [
    { issue: 'Classe .invoice-item-row manquante', probability: '85%', impact: 'Critique' },
    { issue: 'Event listeners non propag√©s', probability: '60%', impact: 'Majeur' },
    { issue: 'S√©lecteurs DOM incorrects', probability: '70%', impact: 'Critique' },
    { issue: 'Timing de calculateTotals()', probability: '40%', impact: 'Mineur' },
    { issue: 'Filtrage description vide', probability: '90%', impact: 'Majeur' }
];

simulatedIssues.forEach((item, index) => {
    console.log(`   ${index + 1}. ${item.issue}`);
    console.log(`      Probabilit√©: ${item.probability} | Impact: ${item.impact}`);
});

console.log('');
console.log('üéØ DIAGNOSTIC COMPLET TERMIN√â - PR√äT POUR CORRECTIONS !');
