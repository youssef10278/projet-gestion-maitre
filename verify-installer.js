/**
 * Script de v√©rification de l'installateur g√©n√©r√©
 * Valide que l'installateur contient tous les composants n√©cessaires
 */

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de l\'installateur g√©n√©r√©...');
console.log('‚ïê'.repeat(60));

const installerDir = 'dist-installer';
const expectedFiles = [
    'GestionPro Setup 2.0.0.exe',
    'latest.yml',
    'GestionPro Setup 2.0.0.exe.blockmap'
];

let verificationPassed = true;
const issues = [];

// V√©rifier que le dossier d'installateur existe
if (!fs.existsSync(installerDir)) {
    console.log('‚ùå Dossier dist-installer manquant');
    console.log('üîß L\'installateur n\'a pas √©t√© g√©n√©r√© correctement');
    process.exit(1);
}

console.log('üìÅ V√©rification du contenu de l\'installateur...');

// Lister tous les fichiers dans le dossier
const actualFiles = fs.readdirSync(installerDir);
console.log(`   üìÇ Fichiers trouv√©s: ${actualFiles.length}`);

// V√©rifier les fichiers attendus
expectedFiles.forEach(file => {
    if (actualFiles.includes(file)) {
        const filePath = path.join(installerDir, file);
        const stats = fs.statSync(filePath);
        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        console.log(`   ‚úÖ ${file} (${sizeMB} MB)`);
    } else {
        console.log(`   ‚ùå ${file} - MANQUANT`);
        issues.push(`Fichier manquant: ${file}`);
        verificationPassed = false;
    }
});

// V√©rifier la taille de l'installateur principal
const mainInstaller = path.join(installerDir, 'GestionPro Setup 2.0.0.exe');
if (fs.existsSync(mainInstaller)) {
    const stats = fs.statSync(mainInstaller);
    const sizeMB = stats.size / (1024 * 1024);
    
    console.log(`\nüìè Analyse de l'installateur principal:`);
    console.log(`   üì¶ Taille: ${sizeMB.toFixed(2)} MB`);
    
    if (sizeMB < 50) {
        console.log('   ‚ö†Ô∏è  Taille suspicieusement petite (< 50 MB)');
        issues.push('Installateur potentiellement incomplet - taille trop petite');
    } else if (sizeMB > 500) {
        console.log('   ‚ö†Ô∏è  Taille importante (> 500 MB)');
        issues.push('Installateur volumineux - v√©rifier les d√©pendances incluses');
    } else {
        console.log('   ‚úÖ Taille appropri√©e');
    }
    
    // V√©rifier la date de cr√©ation
    const creationTime = stats.mtime;
    const now = new Date();
    const ageMinutes = (now - creationTime) / (1000 * 60);
    
    console.log(`   üïí Cr√©√©: ${creationTime.toLocaleString()}`);
    console.log(`   ‚è±Ô∏è  √Çge: ${ageMinutes.toFixed(1)} minutes`);
    
    if (ageMinutes > 60) {
        console.log('   ‚ö†Ô∏è  Installateur ancien (> 1 heure)');
        issues.push('Installateur potentiellement obsol√®te');
    }
}

// V√©rifier le dossier win-unpacked si pr√©sent
const unpackedDir = path.join(installerDir, 'win-unpacked');
if (fs.existsSync(unpackedDir)) {
    console.log('\nüìÇ V√©rification du contenu d√©compress√©...');
    
    const unpackedFiles = fs.readdirSync(unpackedDir);
    console.log(`   üìÅ Fichiers d√©compress√©s: ${unpackedFiles.length}`);
    
    // V√©rifier les fichiers critiques dans le build d√©compress√©
    const criticalUnpackedFiles = [
        'GestionPro.exe',
        'resources'
    ];
    
    criticalUnpackedFiles.forEach(file => {
        if (unpackedFiles.includes(file)) {
            console.log(`   ‚úÖ ${file}`);
        } else {
            console.log(`   ‚ùå ${file} - MANQUANT`);
            issues.push(`Fichier critique manquant dans le build: ${file}`);
            verificationPassed = false;
        }
    });
    
    // V√©rifier le dossier resources
    const resourcesDir = path.join(unpackedDir, 'resources');
    if (fs.existsSync(resourcesDir)) {
        const resourceFiles = fs.readdirSync(resourcesDir);
        console.log(`   üì¶ Ressources: ${resourceFiles.length} fichiers`);
        
        if (resourceFiles.includes('app.asar')) {
            const asarPath = path.join(resourcesDir, 'app.asar');
            const asarStats = fs.statSync(asarPath);
            const asarSizeMB = (asarStats.size / (1024 * 1024)).toFixed(2);
            console.log(`      ‚úÖ app.asar (${asarSizeMB} MB)`);
        } else {
            console.log('      ‚ùå app.asar manquant');
            issues.push('Archive principale app.asar manquante');
            verificationPassed = false;
        }
    }
}

// V√©rifier le fichier de m√©tadonn√©es
const latestYml = path.join(installerDir, 'latest.yml');
if (fs.existsSync(latestYml)) {
    console.log('\nüìã V√©rification des m√©tadonn√©es...');
    try {
        const content = fs.readFileSync(latestYml, 'utf8');
        console.log('   ‚úÖ latest.yml lisible');
        
        if (content.includes('GestionPro Setup 2.0.0.exe')) {
            console.log('   ‚úÖ R√©f√©rence correcte √† l\'installateur');
        } else {
            console.log('   ‚ö†Ô∏è  R√©f√©rence d\'installateur incorrecte');
            issues.push('M√©tadonn√©es incoh√©rentes dans latest.yml');
        }
    } catch (error) {
        console.log('   ‚ùå Erreur de lecture de latest.yml');
        issues.push('Fichier de m√©tadonn√©es corrompu');
        verificationPassed = false;
    }
}

console.log('\nüîê V√©rifications de s√©curit√©...');

// V√©rifier que l'installateur n'est pas vide
if (fs.existsSync(mainInstaller)) {
    const buffer = fs.readFileSync(mainInstaller, { start: 0, end: 1024 });
    if (buffer.includes(Buffer.from('MZ'))) {
        console.log('   ‚úÖ Signature PE valide');
    } else {
        console.log('   ‚ùå Signature PE invalide');
        issues.push('Installateur corrompu - signature PE manquante');
        verificationPassed = false;
    }
}

console.log('\nüìä R√âSUM√â DE LA V√âRIFICATION');
console.log('‚ïê'.repeat(60));

if (verificationPassed && issues.length === 0) {
    console.log('üéâ V√âRIFICATION R√âUSSIE !');
    console.log('‚úÖ L\'installateur est valide et pr√™t √† √™tre distribu√©');
    console.log('‚úÖ Tous les composants critiques sont pr√©sents');
    console.log('‚úÖ La taille et la structure sont correctes');
    
    console.log('\nüì¶ INFORMATIONS DE DISTRIBUTION:');
    console.log(`   üìÅ Emplacement: ${path.resolve(installerDir)}`);
    console.log('   üìã Fichier principal: GestionPro Setup 2.0.0.exe');
    console.log('   üéØ Plateforme cible: Windows x64');
    console.log('   üìù Type: NSIS Installer');
    
    console.log('\nüöÄ PR√äT POUR LA DISTRIBUTION');
    console.log('   ‚Ä¢ Testez l\'installation sur une machine propre');
    console.log('   ‚Ä¢ V√©rifiez toutes les fonctionnalit√©s apr√®s installation');
    console.log('   ‚Ä¢ Distribuez aux utilisateurs finaux');
    
} else {
    console.log('‚ùå V√âRIFICATION √âCHOU√âE');
    
    if (issues.length > 0) {
        console.log('üîß Probl√®mes d√©tect√©s:');
        issues.forEach(issue => {
            console.log(`   ‚Ä¢ ${issue}`);
        });
    }
    
    console.log('\nüõ†Ô∏è  ACTIONS RECOMMAND√âES:');
    console.log('   1. Corriger les probl√®mes list√©s ci-dessus');
    console.log('   2. R√©g√©n√©rer l\'installateur');
    console.log('   3. Relancer cette v√©rification');
    console.log('   4. Tester sur une machine propre avant distribution');
}

console.log('\n' + '‚ïê'.repeat(60));
console.log(`V√©rification termin√©e - ${new Date().toLocaleString()}`);

// Code de sortie pour les scripts
process.exit(verificationPassed && issues.length === 0 ? 0 : 1);
