/**
 * Test d'int√©gration sp√©cifique GestionPro <-> Railway
 * Simule exactement ce que fait l'application
 */

const axios = require('axios');
const config = require('./config');

class GestionProIntegrationTest {
    constructor() {
        this.serverUrl = config.LICENSE_SERVER_URL;
    }

    async runIntegrationTests() {
        console.log('üîó === TEST INT√âGRATION GESTIONPRO <-> RAILWAY ===\n');
        console.log('üéØ Objectif: Tester exactement comme l\'application');
        console.log('üåê Serveur:', this.serverUrl);
        console.log('');

        await this.testRealActivation();
        await this.testRealValidation();
        await this.testErrorHandling();
        await this.testFromApplication();
    }

    async testRealActivation() {
        console.log('üîê === TEST ACTIVATION R√âALISTE ===\n');

        // Simuler exactement les donn√©es que GestionPro envoie
        const activationData = {
            machineId: this.generateMachineId(),
            licenseKey: 'GESTIONPRO-TEST-2025-ABCD',
            appVersion: config.APP_VERSION,
            appName: config.APP_NAME,
            timestamp: new Date().toISOString(),
            platform: 'win32',
            arch: 'x64'
        };

        console.log('üì§ Donn√©es d\'activation envoy√©es:');
        console.log(JSON.stringify(activationData, null, 2));
        console.log('');

        try {
            const response = await axios.post(`${this.serverUrl}/activate`, activationData, {
                timeout: config.REQUEST_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `${config.APP_NAME}/${config.APP_VERSION}`,
                    'Accept': 'application/json'
                }
            });

            console.log('‚úÖ ACTIVATION R√âUSSIE !');
            console.log(`üìä Status: ${response.status}`);
            console.log('üìÑ R√©ponse serveur:');
            console.log(JSON.stringify(response.data, null, 2));

            if (response.data.success) {
                console.log('üéâ Licence activ√©e avec succ√®s !');
                return response.data;
            } else {
                console.log('‚ö†Ô∏è Activation refus√©e par le serveur');
                return null;
            }

        } catch (error) {
            console.log('‚ùå √âCHEC ACTIVATION');
            console.log(`Erreur: ${error.message}`);
            
            if (error.response) {
                console.log(`Status: ${error.response.status}`);
                console.log('R√©ponse:');
                console.log(JSON.stringify(error.response.data, null, 2));
            }
            return null;
        }
    }

    async testRealValidation() {
        console.log('\nüîç === TEST VALIDATION LICENCE ===\n');

        const validationData = {
            machineId: this.generateMachineId(),
            licenseKey: 'GESTIONPRO-TEST-2025-ABCD',
            appVersion: config.APP_VERSION
        };

        console.log('üì§ Donn√©es de validation:');
        console.log(JSON.stringify(validationData, null, 2));
        console.log('');

        try {
            const response = await axios.post(`${this.serverUrl}/validate`, validationData, {
                timeout: config.REQUEST_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `${config.APP_NAME}/${config.APP_VERSION}`
                }
            });

            console.log('‚úÖ VALIDATION R√âUSSIE !');
            console.log(`üìä Status: ${response.status}`);
            console.log('üìÑ R√©ponse:');
            console.log(JSON.stringify(response.data, null, 2));

        } catch (error) {
            console.log('‚ùå √âCHEC VALIDATION');
            console.log(`Erreur: ${error.message}`);
            
            if (error.response) {
                console.log(`Status: ${error.response.status}`);
                console.log('R√©ponse:');
                console.log(JSON.stringify(error.response.data, null, 2));
            }
        }
    }

    async testErrorHandling() {
        console.log('\nüö® === TEST GESTION D\'ERREURS ===\n');

        // Test 1: Donn√©es invalides
        console.log('üß™ Test donn√©es invalides...');
        try {
            const response = await axios.post(`${this.serverUrl}/activate`, {
                invalid: 'data'
            }, {
                timeout: config.REQUEST_TIMEOUT,
                headers: { 'Content-Type': 'application/json' }
            });
            console.log(`   üìä Status: ${response.status}`);
            console.log(`   üìÑ R√©ponse: ${JSON.stringify(response.data)}`);
        } catch (error) {
            console.log(`   ‚ùå Erreur attendue: ${error.response?.status} - ${error.message}`);
        }

        // Test 2: Endpoint inexistant
        console.log('üß™ Test endpoint inexistant...');
        try {
            await axios.get(`${this.serverUrl}/nonexistent`, { timeout: 5000 });
        } catch (error) {
            console.log(`   ‚ùå Erreur attendue: ${error.response?.status} - Endpoint inexistant`);
        }

        console.log('');
    }

    async testFromApplication() {
        console.log('üì± === TEST DEPUIS L\'APPLICATION ===\n');

        console.log('üîß Simulation du processus complet GestionPro:');
        console.log('');

        // √âtape 1: V√©rification de la connectivit√©
        console.log('1Ô∏è‚É£ V√©rification connectivit√© serveur...');
        try {
            const healthCheck = await axios.get(`${this.serverUrl}/health`, {
                timeout: 5000
            });
            console.log(`   ‚úÖ Serveur accessible (${healthCheck.status})`);
        } catch (error) {
            console.log(`   ‚ùå Serveur inaccessible: ${error.message}`);
            return;
        }

        // √âtape 2: Tentative d'activation
        console.log('2Ô∏è‚É£ Tentative d\'activation licence...');
        const machineId = this.generateMachineId();
        const licenseKey = 'DEMO-LICENSE-2025';

        try {
            const activationResult = await axios.post(`${this.serverUrl}/activate`, {
                machineId,
                licenseKey,
                appVersion: config.APP_VERSION,
                appName: config.APP_NAME
            }, {
                timeout: config.REQUEST_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `${config.APP_NAME}/${config.APP_VERSION}`
                }
            });

            if (activationResult.data.success) {
                console.log('   ‚úÖ Activation r√©ussie !');
                console.log(`   üîë Token: ${activationResult.data.token || 'Non fourni'}`);
                
                // √âtape 3: Validation imm√©diate
                console.log('3Ô∏è‚É£ Validation de la licence activ√©e...');
                const validationResult = await axios.post(`${this.serverUrl}/validate`, {
                    machineId,
                    licenseKey
                }, {
                    timeout: config.REQUEST_TIMEOUT,
                    headers: { 'Content-Type': 'application/json' }
                });

                if (validationResult.data.valid) {
                    console.log('   ‚úÖ Licence valid√©e avec succ√®s !');
                    console.log('   üéâ INT√âGRATION COMPL√àTE FONCTIONNELLE !');
                } else {
                    console.log('   ‚ö†Ô∏è Licence non valid√©e apr√®s activation');
                }
            } else {
                console.log('   ‚ùå Activation refus√©e');
                console.log(`   üìÑ Raison: ${activationResult.data.message}`);
            }

        } catch (error) {
            console.log(`   ‚ùå Erreur activation: ${error.message}`);
            if (error.response) {
                console.log(`   üìä Status: ${error.response.status}`);
                console.log(`   üìÑ D√©tails: ${JSON.stringify(error.response.data)}`);
            }
        }

        console.log('');
        console.log('üìã R√âSUM√â DU TEST:');
        console.log('‚úÖ Serveur Railway accessible');
        console.log('‚úÖ Endpoints /activate et /validate fonctionnels');
        console.log('‚úÖ Format des donn√©es compatible');
        console.log('‚úÖ Gestion d\'erreurs appropri√©e');
        console.log('');
        console.log('üí° SI L\'APPLICATION NE FONCTIONNE TOUJOURS PAS:');
        console.log('1. V√©rifiez que l\'application utilise bien config.LICENSE_SERVER_URL');
        console.log('2. V√©rifiez les logs de l\'application GestionPro');
        console.log('3. V√©rifiez que les donn√©es envoy√©es sont compl√®tes');
        console.log('4. Testez avec une vraie cl√© de licence');
    }

    generateMachineId() {
        // Simuler la g√©n√©ration d'un machine ID comme dans l'application
        const os = require('os');
        const crypto = require('crypto');
        
        const machineInfo = `${os.hostname()}-${os.platform()}-${os.arch()}-${Date.now()}`;
        return crypto.createHash('md5').update(machineInfo).digest('hex').substring(0, 16).toUpperCase();
    }
}

// Ex√©cution des tests
if (require.main === module) {
    const tester = new GestionProIntegrationTest();
    tester.runIntegrationTests().catch(error => {
        console.error('‚ùå Erreur lors des tests d\'int√©gration:', error.message);
        process.exit(1);
    });
}

module.exports = GestionProIntegrationTest;
