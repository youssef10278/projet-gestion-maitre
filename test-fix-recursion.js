/**
 * Test de Correction - R√©cursion Infinie delivery-notes.js
 * V√©rifie que la correction de la r√©cursion fonctionne
 */

console.log('üîß TEST DE CORRECTION - R√âCURSION INFINIE');
console.log('=========================================\n');

const fs = require('fs');
const path = require('path');

function testRecursionFix() {
    console.log('üîç V√©rification de la correction de r√©cursion...');
    
    try {
        const filePath = path.join(__dirname, 'src', 'js', 'delivery-notes.js');
        
        if (!fs.existsSync(filePath)) {
            console.log('‚ùå Fichier delivery-notes.js non trouv√©');
            return false;
        }
        
        const content = fs.readFileSync(filePath, 'utf8');
        
        // V√©rifier que la r√©cursion infinie a √©t√© corrig√©e
        const problematicPattern = /return updatePagination\(totalItems\)/;
        const hasProblematicRecursion = problematicPattern.test(content);
        
        if (hasProblematicRecursion) {
            console.log('‚ùå R√âCURSION INFINIE ENCORE PR√âSENTE !');
            console.log('   La ligne "return updatePagination(totalItems)" cause toujours le probl√®me');
            return false;
        }
        
        // V√©rifier que la correction est en place
        const fixPattern = /const newContainer = document\.getElementById\('paginationContainer'\)/;
        const hasFix = fixPattern.test(content);
        
        if (hasFix) {
            console.log('‚úÖ CORRECTION APPLIQU√âE AVEC SUCC√àS !');
            console.log('   La r√©cursion infinie a √©t√© remplac√©e par une v√©rification s√©curis√©e');
        } else {
            console.log('‚ö†Ô∏è  Correction partielle - V√©rification manuelle recommand√©e');
        }
        
        // Compter les occurrences d'updatePagination
        const updatePaginationMatches = content.match(/updatePagination\(/g);
        const callCount = updatePaginationMatches ? updatePaginationMatches.length : 0;
        
        console.log(`üìä Nombre d'appels √† updatePagination: ${callCount}`);
        
        if (callCount <= 3) {
            console.log('‚úÖ Nombre d\'appels normal (‚â§3)');
        } else {
            console.log('‚ö†Ô∏è  Nombre d\'appels √©lev√© - V√©rification recommand√©e');
        }
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Erreur lors de la v√©rification:', error.message);
        return false;
    }
}

function analyzeFileStructure() {
    console.log('\nüìÅ Analyse de la structure du fichier...');
    
    try {
        const filePath = path.join(__dirname, 'src', 'js', 'delivery-notes.js');
        const content = fs.readFileSync(filePath, 'utf8');
        const lines = content.split('\n');
        
        console.log(`üìÑ Taille du fichier: ${lines.length} lignes`);
        console.log(`üíæ Taille: ${(content.length / 1024).toFixed(2)} KB`);
        
        // Analyser les fonctions principales
        const functions = content.match(/function\s+\w+\s*\(/g);
        console.log(`üîß Fonctions d√©tect√©es: ${functions ? functions.length : 0}`);
        
        // V√©rifier les patterns probl√©matiques
        const problematicPatterns = [
            { name: 'R√©cursion directe', pattern: /function\s+(\w+).*\1\s*\(/ },
            { name: 'Boucles infinies', pattern: /while\s*\(\s*true\s*\)/ },
            { name: 'Appels r√©cursifs', pattern: /return\s+\w+\s*\(.*\).*\w+\s*\(/ }
        ];
        
        problematicPatterns.forEach(pattern => {
            const matches = content.match(pattern.pattern);
            if (matches) {
                console.log(`‚ö†Ô∏è  ${pattern.name}: ${matches.length} occurrence(s)`);
            } else {
                console.log(`‚úÖ ${pattern.name}: Aucun probl√®me d√©tect√©`);
            }
        });
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Erreur analyse:', error.message);
        return false;
    }
}

function createBackup() {
    console.log('\nüíæ Cr√©ation d\'une sauvegarde...');
    
    try {
        const originalPath = path.join(__dirname, 'src', 'js', 'delivery-notes.js');
        const backupPath = path.join(__dirname, 'src', 'js', 'delivery-notes.js.backup');
        
        if (fs.existsSync(originalPath)) {
            fs.copyFileSync(originalPath, backupPath);
            console.log('‚úÖ Sauvegarde cr√©√©e: delivery-notes.js.backup');
            return true;
        } else {
            console.log('‚ùå Fichier original non trouv√©');
            return false;
        }
        
    } catch (error) {
        console.log('‚ùå Erreur sauvegarde:', error.message);
        return false;
    }
}

function showRecommendations() {
    console.log('\nüí° RECOMMANDATIONS:');
    console.log('===================');
    console.log('1. üîÑ Red√©marrez l\'application pour appliquer la correction');
    console.log('2. üß™ Testez la fonctionnalit√© de bons de livraison');
    console.log('3. üìä V√©rifiez que la pagination fonctionne correctement');
    console.log('4. üíæ Une sauvegarde a √©t√© cr√©√©e au cas o√π');
    console.log('5. üîç Si le probl√®me persiste, v√©rifiez la console du navigateur');
    
    console.log('\nüö® ACTIONS IMM√âDIATES:');
    console.log('- Fermez l\'application si elle est ouverte');
    console.log('- Relancez avec: npm start');
    console.log('- Testez la page des bons de livraison');
}

// Fonction principale
async function main() {
    console.log('üéØ D√©but du test de correction...\n');
    
    const results = {
        backup: createBackup(),
        recursionFix: testRecursionFix(),
        analysis: analyzeFileStructure()
    };
    
    const successCount = Object.values(results).filter(Boolean).length;
    
    console.log('\nüìä R√âSULTATS:');
    console.log('=============');
    console.log('‚úÖ Sauvegarde:', results.backup ? 'OK' : '√âCHEC');
    console.log('‚úÖ Correction r√©cursion:', results.recursionFix ? 'OK' : '√âCHEC');
    console.log('‚úÖ Analyse fichier:', results.analysis ? 'OK' : '√âCHEC');
    
    console.log(`\nüéä ${successCount}/3 v√©rifications r√©ussies\n`);
    
    if (results.recursionFix) {
        console.log('üéâ CORRECTION APPLIQU√âE AVEC SUCC√àS !');
        console.log('La r√©cursion infinie dans delivery-notes.js a √©t√© corrig√©e.');
    } else {
        console.log('‚ö†Ô∏è  CORRECTION PARTIELLE');
        console.log('V√©rification manuelle recommand√©e.');
    }
    
    showRecommendations();
}

main().catch(console.error);
