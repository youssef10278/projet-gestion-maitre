// test-impression-debug.js - Debug des fonctions d'impression

console.log('üêõ === DEBUG IMPRESSION BONS DE COMMANDE ===');

/**
 * Test de debug pour identifier le probl√®me d'impression
 */
async function debugPrintIssue() {
    try {
        console.log('\n1Ô∏è‚É£ V√âRIFICATION DES MODULES');
        
        // V√©rifier les modules
        console.log('- supplierOrdersAPI:', !!window.supplierOrdersAPI);
        console.log('- purchaseOrderPrinter:', !!window.purchaseOrderPrinter);
        
        if (!window.supplierOrdersAPI) {
            console.error('‚ùå supplierOrdersAPI non disponible');
            return;
        }
        
        console.log('\n2Ô∏è‚É£ LISTE DES COMMANDES DISPONIBLES');
        
        // R√©cup√©rer toutes les commandes
        const orders = await window.supplierOrdersAPI.getOrders();
        console.log('üìã Nombre de commandes:', orders.length);
        
        if (orders.length === 0) {
            console.warn('‚ö†Ô∏è Aucune commande disponible pour le test');
            return;
        }
        
        // Afficher les d√©tails des commandes
        orders.forEach((order, index) => {
            console.log(`üì¶ Commande ${index + 1}:`);
            console.log(`   - ID: ${order.id} (type: ${typeof order.id})`);
            console.log(`   - Num√©ro: ${order.order_number}`);
            console.log(`   - Fournisseur: ${order.supplier_name}`);
            console.log(`   - Statut: ${order.status}`);
            console.log(`   - Articles: ${order.items_count || 'N/A'}`);
        });
        
        console.log('\n3Ô∏è‚É£ TEST DE R√âCUP√âRATION DES D√âTAILS');
        
        // Tester avec la premi√®re commande
        const firstOrder = orders[0];
        console.log(`üîç Test avec commande ID: ${firstOrder.id}`);
        
        try {
            const orderDetails = await window.supplierOrdersAPI.getOrderDetails(firstOrder.id);
            console.log('‚úÖ D√©tails r√©cup√©r√©s avec succ√®s:');
            console.log('   - Num√©ro:', orderDetails.order_number);
            console.log('   - Fournisseur:', orderDetails.supplier_name);
            console.log('   - Articles:', orderDetails.items?.length || 0);
            
            if (orderDetails.items && orderDetails.items.length > 0) {
                console.log('üì¶ Premier article:');
                const firstItem = orderDetails.items[0];
                console.log('   - Nom:', firstItem.product_name);
                console.log('   - Quantit√©:', firstItem.quantity_ordered);
                console.log('   - Prix:', firstItem.unit_price);
            }
            
            console.log('\n4Ô∏è‚É£ TEST DE G√âN√âRATION HTML');
            
            if (window.purchaseOrderPrinter) {
                try {
                    const html = window.purchaseOrderPrinter.generateOrderHTML(orderDetails);
                    console.log('‚úÖ HTML g√©n√©r√© avec succ√®s');
                    console.log('üìè Taille HTML:', html.length, 'caract√®res');
                    
                    // V√©rifier le contenu
                    const hasTitle = html.includes('BON DE COMMANDE');
                    const hasOrderNumber = html.includes(orderDetails.order_number);
                    const hasSupplier = html.includes(orderDetails.supplier_name);
                    
                    console.log('üîç V√©rifications du contenu:');
                    console.log('   - Titre pr√©sent:', hasTitle ? '‚úÖ' : '‚ùå');
                    console.log('   - Num√©ro commande:', hasOrderNumber ? '‚úÖ' : '‚ùå');
                    console.log('   - Nom fournisseur:', hasSupplier ? '‚úÖ' : '‚ùå');
                    
                    console.log('\n5Ô∏è‚É£ TEST D\'APER√áU');
                    
                    // Tester l'aper√ßu
                    await window.purchaseOrderPrinter.previewOrder(orderDetails);
                    console.log('‚úÖ Aper√ßu test√© avec succ√®s');
                    
                } catch (error) {
                    console.error('‚ùå Erreur lors de la g√©n√©ration HTML:', error);
                }
            } else {
                console.error('‚ùå purchaseOrderPrinter non disponible');
            }
            
        } catch (error) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©tails:', error);
            console.error('üìã D√©tails de l\'erreur:', error.message);
        }
        
        console.log('\n6Ô∏è‚É£ TEST DES FONCTIONS D\'INT√âGRATION');
        
        // Tester les fonctions globales
        try {
            console.log('üîç Test de previewPurchaseOrder...');
            if (typeof previewPurchaseOrder === 'function') {
                await previewPurchaseOrder(firstOrder.id);
                console.log('‚úÖ previewPurchaseOrder fonctionne');
            } else {
                console.error('‚ùå previewPurchaseOrder non d√©finie');
            }
        } catch (error) {
            console.error('‚ùå Erreur previewPurchaseOrder:', error.message);
        }
        
        console.log('\nüéØ R√âSULTAT DU DEBUG');
        console.log('‚úÖ Debug termin√© - V√©rifiez les logs ci-dessus pour identifier les probl√®mes');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du debug:', error);
    }
}

/**
 * Test rapide avec une commande sp√©cifique
 */
async function testSpecificOrder(orderId) {
    try {
        console.log(`\nüéØ TEST SP√âCIFIQUE - Commande ID: ${orderId}`);
        
        // Convertir en nombre si c'est une cha√Æne
        const numericId = parseInt(orderId);
        console.log(`üî¢ ID num√©rique: ${numericId}`);
        
        // Tester la r√©cup√©ration
        const orderDetails = await window.supplierOrdersAPI.getOrderDetails(numericId);
        console.log('‚úÖ Commande trouv√©e:', orderDetails.order_number);
        
        // Tester l'aper√ßu
        if (window.purchaseOrderPrinter) {
            await window.purchaseOrderPrinter.previewOrder(orderDetails);
            console.log('‚úÖ Aper√ßu ouvert avec succ√®s');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur test sp√©cifique:', error.message);
    }
}

/**
 * Cr√©er une commande de test si aucune n'existe
 */
async function createTestOrderIfNeeded() {
    try {
        const orders = await window.supplierOrdersAPI.getOrders();
        
        if (orders.length > 0) {
            console.log('‚úÖ Commandes existantes trouv√©es, pas besoin de cr√©er de test');
            return;
        }
        
        console.log('üîß Cr√©ation d\'une commande de test...');
        
        // R√©cup√©rer un fournisseur
        const suppliers = await window.api.suppliers.getAll();
        if (suppliers.length === 0) {
            console.error('‚ùå Aucun fournisseur disponible');
            return;
        }
        
        const testOrderData = {
            supplier_id: suppliers[0].id,
            order_date: new Date().toISOString().split('T')[0],
            status: 'PENDING',
            notes: 'Commande de test pour debug impression',
            items: [
                {
                    product_name: 'Produit Test Debug',
                    product_reference: 'TEST-DEBUG-001',
                    quantity_ordered: 5,
                    unit_price: 100.00
                }
            ]
        };
        
        const result = await window.supplierOrdersAPI.createOrder(testOrderData);
        console.log('‚úÖ Commande de test cr√©√©e:', result.order_number);
        
        return result.id;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation de commande test:', error);
    }
}

// Exporter les fonctions
window.debugPrintIssue = debugPrintIssue;
window.testSpecificOrder = testSpecificOrder;
window.createTestOrderIfNeeded = createTestOrderIfNeeded;

console.log('üõ†Ô∏è Fonctions de debug disponibles:');
console.log('- debugPrintIssue() : Debug complet du syst√®me d\'impression');
console.log('- testSpecificOrder(id) : Test avec une commande sp√©cifique');
console.log('- createTestOrderIfNeeded() : Cr√©er une commande de test si n√©cessaire');
console.log('\nüí° Commencez par: debugPrintIssue()');
