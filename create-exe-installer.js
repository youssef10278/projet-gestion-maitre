/**
 * Script pour cr√©er un installateur .exe en contournant les probl√®mes de fichiers verrouill√©s
 * Utilise une approche de nettoyage complet et reconstruction
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
console.log('‚ïë                    üì¶ CR√âATION INSTALLATEUR .EXE GESTIONPRO                 ‚ïë');
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
console.log('');

async function forceKillProcesses() {
    console.log('üîÑ ARR√äT FORC√â DE TOUS LES PROCESSUS...');
    console.log('');
    
    const processesToKill = [
        'electron.exe',
        'GestionPro.exe', 
        'node.exe',
        'app-builder.exe',
        'nsis.exe'
    ];
    
    for (const proc of processesToKill) {
        try {
            console.log(`   üî´ Arr√™t de ${proc}...`);
            execSync(`taskkill /F /IM ${proc} /T 2>nul || true`, { stdio: 'ignore' });
        } catch (error) {
            // Ignorer les erreurs
        }
    }
    
    console.log('‚úÖ Processus arr√™t√©s');
    
    // Attendre que les fichiers se lib√®rent
    console.log('‚è≥ Attente de lib√©ration des fichiers (10 secondes)...');
    await new Promise(resolve => setTimeout(resolve, 10000));
}

function forceCleanDirectories() {
    console.log('üßπ NETTOYAGE FORC√â DES DOSSIERS...');
    console.log('');
    
    const dirsToClean = [
        'installateur-gestionpro',
        'gestionpro-v2-final',
        'dist',
        'build/output'
    ];
    
    dirsToClean.forEach(dir => {
        if (fs.existsSync(dir)) {
            console.log(`üóëÔ∏è  Suppression forc√©e de ${dir}...`);
            
            try {
                // M√©thode 1: Node.js
                fs.rmSync(dir, { recursive: true, force: true });
                console.log(`   ‚úÖ ${dir} supprim√© (Node.js)`);
            } catch (error) {
                try {
                    // M√©thode 2: Commande syst√®me
                    execSync(`rmdir /s /q "${dir}" 2>nul || rm -rf "${dir}" 2>/dev/null || true`, { stdio: 'ignore' });
                    console.log(`   ‚úÖ ${dir} supprim√© (syst√®me)`);
                } catch (error2) {
                    console.log(`   ‚ö†Ô∏è  ${dir} partiellement supprim√©`);
                }
            }
        }
    });
}

function createFreshBuild() {
    console.log('üèóÔ∏è  CR√âATION D\'UN BUILD PROPRE...');
    console.log('');
    
    try {
        // Nettoyer le cache npm
        console.log('üßπ Nettoyage du cache npm...');
        execSync('npm cache clean --force', { stdio: 'inherit' });
        
        // Supprimer node_modules/.cache
        const cacheDir = 'node_modules/.cache';
        if (fs.existsSync(cacheDir)) {
            fs.rmSync(cacheDir, { recursive: true, force: true });
            console.log('‚úÖ Cache node_modules supprim√©');
        }
        
        // Reconstruire les modules natifs
        console.log('üîß Reconstruction des modules natifs...');
        execSync('npm rebuild', { stdio: 'inherit' });
        
        // Compiler CSS
        console.log('üé® Compilation CSS...');
        execSync('npx tailwindcss -i ./src/css/input.css -o ./src/css/output.css --minify', { stdio: 'inherit' });
        
        return true;
    } catch (error) {
        console.log(`‚ùå Erreur lors de la pr√©paration: ${error.message}`);
        return false;
    }
}

function createInstaller() {
    console.log('üì¶ G√âN√âRATION DE L\'INSTALLATEUR .EXE...');
    console.log('');
    
    try {
        // Utiliser electron-builder avec options sp√©cifiques
        console.log('üî® Lancement d\'electron-builder...');
        execSync('npx electron-builder --win nsis --publish=never', {
            stdio: 'inherit',
            timeout: 600000, // 10 minutes
            env: {
                ...process.env,
                DEBUG: 'electron-builder',
                FORCE_COLOR: '1'
            }
        });
        
        console.log('‚úÖ Installateur .exe cr√©√© avec succ√®s !');
        return true;
    } catch (error) {
        console.log('‚ùå √âchec avec la m√©thode standard');
        
        try {
            // M√©thode alternative avec configuration sp√©cifique
            console.log('üîÑ Tentative avec configuration alternative...');
            execSync('npx electron-builder --win --config.nsis.oneClick=false --config.nsis.allowToChangeInstallationDirectory=true', {
                stdio: 'inherit',
                timeout: 600000
            });
            
            console.log('‚úÖ Installateur cr√©√© avec m√©thode alternative !');
            return true;
        } catch (error2) {
            console.log('‚ùå √âchec de la m√©thode alternative');
            return false;
        }
    }
}

function verifyInstaller() {
    console.log('üîç V√âRIFICATION DE L\'INSTALLATEUR...');
    console.log('');
    
    const possiblePaths = [
        'installateur-gestionpro/GestionPro Setup 2.0.0.exe',
        'dist/GestionPro Setup 2.0.0.exe',
        'installateur-gestionpro/GestionPro-2.0.0-Setup.exe'
    ];
    
    for (const installerPath of possiblePaths) {
        if (fs.existsSync(installerPath)) {
            const stats = fs.statSync(installerPath);
            const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
            
            console.log('üéâ INSTALLATEUR .EXE TROUV√â !');
            console.log('');
            console.log('üì¶ INFORMATIONS:');
            console.log(`   üìÅ Emplacement: ${path.resolve(installerPath)}`);
            console.log(`   üìÑ Nom: ${path.basename(installerPath)}`);
            console.log(`   üìè Taille: ${sizeMB} MB`);
            console.log(`   üïí Cr√©√©: ${stats.mtime.toLocaleString()}`);
            console.log('');
            
            console.log('‚úÖ CARACT√âRISTIQUES DE L\'INSTALLATEUR:');
            console.log('   ‚Ä¢ Type: NSIS Installer (.exe)');
            console.log('   ‚Ä¢ Plateforme: Windows x64');
            console.log('   ‚Ä¢ Installation: Assistant graphique');
            console.log('   ‚Ä¢ D√©sinstallation: Automatique');
            console.log('   ‚Ä¢ Raccourcis: Bureau + Menu D√©marrer');
            console.log('');
            
            console.log('üîß UTILISATION:');
            console.log('   1. Double-cliquez sur le fichier .exe');
            console.log('   2. Suivez l\'assistant d\'installation');
            console.log('   3. Choisissez le r√©pertoire d\'installation');
            console.log('   4. Lancez GestionPro depuis le menu D√©marrer');
            console.log('');
            
            console.log('üîë CONNEXION INITIALE:');
            console.log('   üë§ Utilisateur: proprietaire');
            console.log('   üîê Mot de passe: admin');
            console.log('');
            
            return installerPath;
        }
    }
    
    console.log('‚ùå Aucun installateur .exe trouv√©');
    
    // Diagnostic
    console.log('');
    console.log('üîç DIAGNOSTIC:');
    if (fs.existsSync('installateur-gestionpro')) {
        console.log('üìÅ Contenu de installateur-gestionpro:');
        const files = fs.readdirSync('installateur-gestionpro');
        files.forEach(file => {
            const filePath = path.join('installateur-gestionpro', file);
            const stats = fs.statSync(filePath);
            const size = stats.isFile() ? ` (${(stats.size / 1024).toFixed(1)} KB)` : '';
            console.log(`   ‚Ä¢ ${file}${size}`);
        });
    }
    
    if (fs.existsSync('dist')) {
        console.log('üìÅ Contenu de dist:');
        const files = fs.readdirSync('dist');
        files.forEach(file => {
            const filePath = path.join('dist', file);
            const stats = fs.statSync(filePath);
            const size = stats.isFile() ? ` (${(stats.size / 1024).toFixed(1)} KB)` : '';
            console.log(`   ‚Ä¢ ${file}${size}`);
        });
    }
    
    return null;
}

async function main() {
    console.log('üöÄ Cr√©ation d\'un installateur .exe pour GestionPro v2.0.0');
    console.log('');
    
    console.log('‚ö†Ô∏è  IMPORTANT: Fermez toutes les instances de GestionPro avant de continuer');
    console.log('');
    
    // √âtape 1: Validation pr√©liminaire
    console.log('üìã VALIDATION PR√âLIMINAIRE...');
    try {
        execSync('node validate-build.js', { stdio: 'inherit' });
        console.log('‚úÖ Validation r√©ussie');
    } catch (error) {
        console.log('‚ùå Validation √©chou√©e');
        process.exit(1);
    }
    
    console.log('');
    
    // √âtape 2: Arr√™t forc√© des processus
    await forceKillProcesses();
    
    // √âtape 3: Nettoyage forc√©
    forceCleanDirectories();
    
    // √âtape 4: Pr√©paration du build
    console.log('');
    if (!createFreshBuild()) {
        console.log('‚ùå √âchec de la pr√©paration');
        process.exit(1);
    }
    
    // √âtape 5: Cr√©ation de l'installateur
    console.log('');
    if (!createInstaller()) {
        console.log('‚ùå √âchec de la cr√©ation de l\'installateur');
        process.exit(1);
    }
    
    // √âtape 6: V√©rification
    console.log('');
    const installerPath = verifyInstaller();
    
    if (installerPath) {
        console.log('üéâ SUCC√àS COMPLET !');
        console.log('');
        console.log('üì¶ INSTALLATEUR .EXE CR√â√â AVEC SUCC√àS');
        console.log('');
        console.log('üéØ PROCHAINES √âTAPES:');
        console.log('   1. Testez l\'installateur sur une machine propre');
        console.log('   2. V√©rifiez toutes les fonctionnalit√©s apr√®s installation');
        console.log('   3. Distribuez aux utilisateurs finaux');
        console.log('');
        console.log('üìÇ EMPLACEMENT FINAL:');
        console.log(`   ${path.resolve(installerPath)}`);
        
    } else {
        console.log('‚ùå √âCHEC DE LA CR√âATION');
        console.log('');
        console.log('üîß SOLUTIONS POSSIBLES:');
        console.log('   1. Red√©marrez votre ordinateur');
        console.log('   2. Fermez tous les antivirus temporairement');
        console.log('   3. Ex√©cutez en tant qu\'administrateur');
        console.log('   4. Lib√©rez de l\'espace disque');
        process.exit(1);
    }
}

// Gestion des erreurs
process.on('uncaughtException', (error) => {
    console.log('');
    console.log('‚ùå ERREUR CRITIQUE:', error.message);
    console.log('üîß Red√©marrez votre ordinateur et r√©essayez');
    process.exit(1);
});

// Lancer le processus
main().catch(error => {
    console.error('‚ùå Erreur fatale:', error.message);
    process.exit(1);
});
