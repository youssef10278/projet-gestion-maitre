/**
 * Test Railway avec le format exact attendu par le serveur
 * Utilise les m√™mes donn√©es que LicenseManagerElectron
 */

const axios = require('axios');
const crypto = require('crypto');
const os = require('os');
const config = require('./config');

class RailwayCorrectFormatTest {
    constructor() {
        this.serverUrl = config.LICENSE_SERVER_URL;
    }

    async runCorrectFormatTest() {
        console.log('üéØ === TEST RAILWAY AVEC FORMAT CORRECT ===\n');
        console.log('üåê Serveur:', this.serverUrl);
        console.log('üìã Utilisation du format exact de LicenseManagerElectron');
        console.log('');

        await this.testWithCorrectFormat();
    }

    // Reproduire exactement getMachineInfo() de LicenseManagerElectron
    getMachineInfo() {
        try {
            // Simuler machineIdSync car on n'a pas le vrai module
            const machineId = this.generateMachineId();
            
            // G√©n√©rer une empreinte mat√©rielle unique (comme dans le code original)
            const hardwareInfo = {
                cpuModel: os.cpus()[0]?.model || 'unknown',
                cpuCount: os.cpus().length,
                totalMemory: Math.round(os.totalmem() / (1024 * 1024 * 1024)), // GB
                platform: os.platform(),
                arch: os.arch(),
                hostname: os.hostname(),
                macAddresses: this.getMacAddresses()
            };

            console.log('üñ•Ô∏è Hardware Info g√©n√©r√©:', JSON.stringify(hardwareInfo, null, 2));

            // Cr√©er une empreinte unique bas√©e sur le mat√©riel
            const hardwareString = JSON.stringify(hardwareInfo);
            const hardwareFingerprint = crypto.createHash('md5').update(hardwareString).digest('hex');
            
            console.log('üîí Fingerprint g√©n√©r√©:', hardwareFingerprint);

            return {
                machineId,
                hardwareFingerprint,
                hardwareInfo
            };
        } catch (error) {
            console.error('‚ùå Erreur lors de la g√©n√©ration des infos machine:', error);
            throw new Error('Impossible de g√©n√©rer l\'empreinte mat√©rielle');
        }
    }

    // Reproduire getMacAddresses()
    getMacAddresses() {
        try {
            const networkInterfaces = os.networkInterfaces();
            const macAddresses = [];
            
            for (const interfaceName in networkInterfaces) {
                const interfaces = networkInterfaces[interfaceName];
                for (const iface of interfaces) {
                    if (iface.mac && iface.mac !== '00:00:00:00:00:00') {
                        macAddresses.push(iface.mac);
                    }
                }
            }
            
            return [...new Set(macAddresses)]; // Supprimer les doublons
        } catch (error) {
            console.error('‚ùå Erreur r√©cup√©ration MAC:', error);
            return [];
        }
    }

    // G√©n√©rer un machine ID simul√©
    generateMachineId() {
        const machineInfo = `${os.hostname()}-${os.platform()}-${os.arch()}-${os.cpus()[0]?.model}`;
        return crypto.createHash('sha256').update(machineInfo).digest('hex').substring(0, 32);
    }

    async testWithCorrectFormat() {
        console.log('üîê === TEST ACTIVATION AVEC FORMAT CORRECT ===\n');

        try {
            // G√©n√©rer les infos machine exactement comme LicenseManagerElectron
            const machineInfo = this.getMachineInfo();
            
            // Pr√©parer les donn√©es exactement comme dans activateLicense()
            const activationData = {
                licenseKey: 'GESTIONPRO-TEST-2025-DEMO',
                machineId: machineInfo.machineId,
                hardwareFingerprint: machineInfo.hardwareFingerprint,
                hardwareInfo: machineInfo.hardwareInfo
            };

            console.log('üì§ Donn√©es d\'activation (format correct):');
            console.log('   üîë License Key:', activationData.licenseKey);
            console.log('   üñ•Ô∏è Machine ID:', activationData.machineId.substring(0, 16) + '...');
            console.log('   üîí Hardware Fingerprint:', activationData.hardwareFingerprint.substring(0, 16) + '...');
            console.log('   üìä Hardware Info:', Object.keys(activationData.hardwareInfo).join(', '));
            console.log('');

            // Faire la requ√™te exactement comme LicenseManagerElectron
            console.log('üì° Envoi de la requ√™te d\'activation...');
            const response = await axios.post(`${this.serverUrl}/activate`, activationData, {
                timeout: config.REQUEST_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `${config.APP_NAME}/${config.APP_VERSION}`
                }
            });

            console.log('‚úÖ ACTIVATION R√âUSSIE !');
            console.log(`üìä Status: ${response.status}`);
            console.log('üìÑ R√©ponse compl√®te:');
            console.log(JSON.stringify(response.data, null, 2));

            if (response.data.success) {
                console.log('üéâ LICENCE ACTIV√âE AVEC SUCC√àS !');
                
                // Test de validation avec le m√™me format
                await this.testValidationWithCorrectFormat(machineInfo, activationData.licenseKey);
                
            } else {
                console.log('‚ö†Ô∏è Activation refus√©e par le serveur');
                console.log(`üìù Message: ${response.data.message}`);
            }

        } catch (error) {
            console.log('‚ùå √âCHEC ACTIVATION');
            console.log(`Erreur: ${error.message}`);
            
            if (error.response) {
                console.log(`üìä Status: ${error.response.status}`);
                console.log('üìÑ R√©ponse serveur:');
                console.log(JSON.stringify(error.response.data, null, 2));
                
                if (error.response.status === 400) {
                    console.log('');
                    console.log('üîç ANALYSE ERREUR 400:');
                    console.log('Le serveur rejette encore les donn√©es.');
                    console.log('V√©rifiez que votre serveur Railway attend exactement ces champs:');
                    console.log('- licenseKey (string)');
                    console.log('- machineId (string)');
                    console.log('- hardwareFingerprint (string)');
                    console.log('- hardwareInfo (object)');
                }
            }
        }
    }

    async testValidationWithCorrectFormat(machineInfo, licenseKey) {
        console.log('\nüîç === TEST VALIDATION AVEC FORMAT CORRECT ===\n');

        try {
            const validationData = {
                licenseKey: licenseKey,
                machineId: machineInfo.machineId,
                hardwareFingerprint: machineInfo.hardwareFingerprint
            };

            console.log('üì§ Donn√©es de validation:');
            console.log('   üîë License Key:', validationData.licenseKey);
            console.log('   üñ•Ô∏è Machine ID:', validationData.machineId.substring(0, 16) + '...');
            console.log('   üîí Hardware Fingerprint:', validationData.hardwareFingerprint.substring(0, 16) + '...');
            console.log('');

            const response = await axios.post(`${this.serverUrl}/validate`, validationData, {
                timeout: config.REQUEST_TIMEOUT,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': `${config.APP_NAME}/${config.APP_VERSION}`
                }
            });

            console.log('‚úÖ VALIDATION R√âUSSIE !');
            console.log(`üìä Status: ${response.status}`);
            console.log('üìÑ R√©ponse:');
            console.log(JSON.stringify(response.data, null, 2));

        } catch (error) {
            console.log('‚ùå √âCHEC VALIDATION');
            console.log(`Erreur: ${error.message}`);
            
            if (error.response) {
                console.log(`üìä Status: ${error.response.status}`);
                console.log('üìÑ R√©ponse:');
                console.log(JSON.stringify(error.response.data, null, 2));
            }
        }
    }
}

// Ex√©cution du test
if (require.main === module) {
    const tester = new RailwayCorrectFormatTest();
    tester.runCorrectFormatTest().catch(error => {
        console.error('‚ùå Erreur lors du test:', error.message);
        process.exit(1);
    });
}

module.exports = RailwayCorrectFormatTest;
