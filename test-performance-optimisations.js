/**
 * Test des Optimisations de Performance - GestionPro
 * V√©rifie que les optimisations appliqu√©es fonctionnent correctement
 */

console.log('üöÄ TEST DES OPTIMISATIONS DE PERFORMANCE');
console.log('=========================================\n');

const fs = require('fs');
const path = require('path');

// 1. V√©rifier les optimisations dans main.js
function checkMainJsOptimizations() {
    console.log('‚ö° V√©rification des optimisations Electron...');
    
    try {
        const mainPath = path.join(__dirname, 'main.js');
        const content = fs.readFileSync(mainPath, 'utf8');
        
        const optimizations = [
            { name: 'max-old-space-size', check: content.includes('max-old-space-size') },
            { name: 'VaapiVideoDecoder', check: content.includes('VaapiVideoDecoder') },
            { name: 'disk-cache-size', check: content.includes('disk-cache-size') },
            { name: 'contextIsolation', check: content.includes('contextIsolation: true') },
            { name: 'nodeIntegration', check: content.includes('nodeIntegration: false') },
            { name: 'setFrameRate', check: content.includes('setFrameRate') }
        ];
        
        let optimizedCount = 0;
        optimizations.forEach(opt => {
            if (opt.check) {
                console.log(`‚úÖ ${opt.name} - Optimis√©`);
                optimizedCount++;
            } else {
                console.log(`‚ùå ${opt.name} - Manquant`);
            }
        });
        
        console.log(`\nüìä ${optimizedCount}/${optimizations.length} optimisations Electron appliqu√©es\n`);
        return optimizedCount >= 4; // Au moins 4 optimisations
        
    } catch (error) {
        console.log('‚ùå Erreur v√©rification main.js:', error.message);
        return false;
    }
}

// 2. V√©rifier les optimisations dans products.js
function checkProductsJsOptimizations() {
    console.log('üîç V√©rification des optimisations interface...');
    
    try {
        const productsPath = path.join(__dirname, 'src', 'js', 'products.js');
        const content = fs.readFileSync(productsPath, 'utf8');
        
        const optimizations = [
            { name: 'Fonction debounce', check: content.includes('function debounce') },
            { name: 'ITEMS_PER_PAGE', check: content.includes('ITEMS_PER_PAGE') },
            { name: 'Pagination controls', check: content.includes('createPaginationControls') },
            { name: 'Performance warning', check: content.includes('1000 produits charg√©s') },
            { name: 'Page slice', check: content.includes('slice(startIndex, endIndex)') }
        ];
        
        let optimizedCount = 0;
        optimizations.forEach(opt => {
            if (opt.check) {
                console.log(`‚úÖ ${opt.name} - Impl√©ment√©`);
                optimizedCount++;
            } else {
                console.log(`‚ùå ${opt.name} - Manquant`);
            }
        });
        
        console.log(`\nüìä ${optimizedCount}/${optimizations.length} optimisations interface appliqu√©es\n`);
        return optimizedCount >= 3; // Au moins 3 optimisations
        
    } catch (error) {
        console.log('‚ùå Erreur v√©rification products.js:', error.message);
        return false;
    }
}

// 3. V√©rifier les fichiers d'optimisation cr√©√©s
function checkOptimizationFiles() {
    console.log('üìÅ V√©rification des fichiers d\'optimisation...');
    
    const files = [
        { name: 'database-optimizations.js', path: 'database-optimizations.js' },
        { name: 'Guide optimisation interface', path: 'GUIDE-OPTIMISATION-INTERFACE.md' }
    ];
    
    let filesCount = 0;
    files.forEach(file => {
        if (fs.existsSync(file.path)) {
            console.log(`‚úÖ ${file.name} - Cr√©√©`);
            filesCount++;
        } else {
            console.log(`‚ùå ${file.name} - Manquant`);
        }
    });
    
    console.log(`\nüìä ${filesCount}/${files.length} fichiers d'optimisation cr√©√©s\n`);
    return filesCount >= 1;
}

// 4. Test de performance simul√©
function simulatePerformanceTest() {
    console.log('‚è±Ô∏è  Test de performance simul√©...');
    
    // Simuler le chargement de produits
    const products = [];
    for (let i = 0; i < 1000; i++) {
        products.push({
            id: i,
            name: `Produit ${i}`,
            barcode: `BAR${i.toString().padStart(6, '0')}`,
            price: Math.random() * 100,
            stock: Math.floor(Math.random() * 100)
        });
    }
    
    // Test 1: Recherche avec debounce simul√©
    const start1 = Date.now();
    const searchResults = products.filter(p => p.name.includes('Produit 5'));
    const end1 = Date.now();
    console.log(`  Recherche (${searchResults.length} r√©sultats): ${end1 - start1}ms`);
    
    // Test 2: Pagination simul√©e
    const start2 = Date.now();
    const ITEMS_PER_PAGE = 100;
    const page1 = products.slice(0, ITEMS_PER_PAGE);
    const end2 = Date.now();
    console.log(`  Pagination (${page1.length} √©l√©ments): ${end2 - start2}ms`);
    
    // Test 3: Tri simul√©
    const start3 = Date.now();
    const sorted = [...products].sort((a, b) => a.name.localeCompare(b.name));
    const end3 = Date.now();
    console.log(`  Tri (${sorted.length} √©l√©ments): ${end3 - start3}ms`);
    
    console.log('\n‚úÖ Tests de performance simul√©s termin√©s\n');
    return true;
}

// 5. Recommandations finales
function showRecommendations() {
    console.log('üí° RECOMMANDATIONS FINALES:');
    console.log('============================');
    console.log('1. üöÄ Red√©marrez l\'application pour appliquer les optimisations Electron');
    console.log('2. üìä Les listes de produits sont maintenant pagin√©es (100 √©l√©ments/page)');
    console.log('3. üîç La recherche utilise maintenant un debounce de 300ms');
    console.log('4. ‚ö° La m√©moire est optimis√©e avec un cache de 50MB');
    console.log('5. üéØ Pour de meilleures performances avec >1000 produits:');
    console.log('   - Utilisez des filtres par cat√©gorie');
    console.log('   - Recherchez avec des termes sp√©cifiques');
    console.log('   - Consid√©rez l\'archivage des anciens produits');
    console.log('\n6. üìà Surveillez les performances avec:');
    console.log('   - Gestionnaire des t√¢ches Windows');
    console.log('   - DevTools Electron (F12)');
    console.log('   - Logs de la console');
}

// Fonction principale
async function runPerformanceTest() {
    console.log('üéØ D√©but du test des optimisations...\n');
    
    const results = {
        electron: checkMainJsOptimizations(),
        interface: checkProductsJsOptimizations(),
        files: checkOptimizationFiles(),
        performance: simulatePerformanceTest()
    };
    
    const successCount = Object.values(results).filter(Boolean).length;
    
    console.log('üìä R√âSULTATS FINAUX:');
    console.log('====================');
    console.log('‚úÖ Optimisations Electron:', results.electron ? 'OK' : 'PARTIEL');
    console.log('‚úÖ Optimisations Interface:', results.interface ? 'OK' : 'PARTIEL');
    console.log('‚úÖ Fichiers d\'optimisation:', results.files ? 'OK' : 'PARTIEL');
    console.log('‚úÖ Tests de performance:', results.performance ? 'OK' : '√âCHEC');
    
    console.log(`\nüéä ${successCount}/4 cat√©gories d'optimisations r√©ussies\n`);
    
    if (successCount >= 3) {
        console.log('üéâ OPTIMISATIONS APPLIQU√âES AVEC SUCC√àS !');
        console.log('L\'application devrait √™tre significativement plus rapide.\n');
        showRecommendations();
    } else {
        console.log('‚ö†Ô∏è  OPTIMISATIONS PARTIELLES');
        console.log('Certaines optimisations n\'ont pas pu √™tre appliqu√©es.');
        console.log('Consultez les messages d\'erreur ci-dessus.\n');
    }
}

// Lancer le test
runPerformanceTest().catch(console.error);
