// Test d'optimisation de la base de donn√©es pour 1000+ √©l√©ments
const db = require('./database.js');

console.log('üîß === TEST OPTIMISATION BASE DE DONN√âES ===\n');

// Fonction pour mesurer le temps d'ex√©cution
function measureTime(label, fn) {
    const start = Date.now();
    const result = fn();
    const end = Date.now();
    const duration = end - start;
    console.log(`‚è±Ô∏è  ${label}: ${duration}ms`);
    return { result, duration };
}

// Cr√©er des index pour optimiser les performances
function createOptimizationIndexes() {
    console.log('üìä Cr√©ation des index d\'optimisation...\n');
    
    try {
        // Index pour les recherches fr√©quentes
        const indexes = [
            'CREATE INDEX IF NOT EXISTS idx_products_name ON products(name)',
            'CREATE INDEX IF NOT EXISTS idx_products_barcode ON products(barcode)',
            'CREATE INDEX IF NOT EXISTS idx_products_category ON products(category)',
            'CREATE INDEX IF NOT EXISTS idx_products_stock_alert ON products(stock, alert_threshold)',
            'CREATE INDEX IF NOT EXISTS idx_clients_name ON clients(name)',
            'CREATE INDEX IF NOT EXISTS idx_clients_phone ON clients(phone)',
            'CREATE INDEX IF NOT EXISTS idx_clients_credit ON clients(credit_balance)',
            'CREATE INDEX IF NOT EXISTS idx_sales_date ON sales(sale_date)',
            'CREATE INDEX IF NOT EXISTS idx_sales_client ON sales(client_id)',
            'CREATE INDEX IF NOT EXISTS idx_sale_items_product ON sale_items(product_id)'
        ];
        
        indexes.forEach(indexSQL => {
            db.exec(indexSQL);
        });
        
        console.log('‚úÖ Index cr√©√©s avec succ√®s');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation des index:', error.message);
    }
}

// Test des requ√™tes optimis√©es vs non-optimis√©es
function testQueryOptimization() {
    console.log('\nüîç Test des requ√™tes optimis√©es...\n');
    
    // V√©rifier qu'on a des donn√©es
    const productCount = db.prepare('SELECT COUNT(*) as count FROM products').get().count;
    const clientCount = db.prepare('SELECT COUNT(*) as count FROM clients').get().count;
    
    console.log(`üìä Donn√©es disponibles: ${productCount} produits, ${clientCount} clients\n`);
    
    if (productCount < 100 || clientCount < 100) {
        console.log('‚ö†Ô∏è  Pas assez de donn√©es pour les tests. G√©n√©ration de donn√©es...\n');
        generateTestData();
    }
    
    const tests = [];
    
    // Test 1: Recherche par nom (avec LIKE)
    tests.push(measureTime('Recherche produit par nom (LIKE)', () => {
        return db.prepare('SELECT * FROM products WHERE name LIKE ? LIMIT 50').all('%Test%');
    }));
    
    // Test 2: Recherche exacte par code-barres (avec INDEX)
    tests.push(measureTime('Recherche par code-barres (INDEX)', () => {
        return db.prepare('SELECT * FROM products WHERE barcode = ?').get('BAR000001');
    }));
    
    // Test 3: Filtrage par cat√©gorie (avec INDEX)
    tests.push(measureTime('Filtrage par cat√©gorie (INDEX)', () => {
        return db.prepare('SELECT * FROM products WHERE category = ?').all('Alimentaire');
    }));
    
    // Test 4: Produits en rupture de stock (INDEX compos√©)
    tests.push(measureTime('Produits en rupture (INDEX compos√©)', () => {
        return db.prepare('SELECT * FROM products WHERE stock <= alert_threshold').all();
    }));
    
    // Test 5: Recherche client par nom
    tests.push(measureTime('Recherche client par nom', () => {
        return db.prepare('SELECT * FROM clients WHERE name LIKE ? LIMIT 50').all('%Client%');
    }));
    
    // Test 6: Clients avec cr√©dit positif
    tests.push(measureTime('Clients avec cr√©dit positif', () => {
        return db.prepare('SELECT * FROM clients WHERE credit_balance > 0').all();
    }));
    
    // Test 7: Jointure ventes avec clients
    tests.push(measureTime('Jointure ventes-clients', () => {
        return db.prepare(`
            SELECT s.*, c.name as client_name 
            FROM sales s 
            LEFT JOIN clients c ON s.client_id = c.id 
            ORDER BY s.sale_date DESC 
            LIMIT 100
        `).all();
    }));
    
    // Test 8: Statistiques par cat√©gorie
    tests.push(measureTime('Statistiques par cat√©gorie', () => {
        return db.prepare(`
            SELECT category, COUNT(*) as count, AVG(price_retail) as avg_price 
            FROM products 
            GROUP BY category
        `).all();
    }));
    
    return tests;
}

// G√©n√©rer des donn√©es de test si n√©cessaire
function generateTestData() {
    console.log('üìù G√©n√©ration de donn√©es de test...\n');
    
    const categories = ['Alimentaire', 'Boissons', 'Hygi√®ne', '√âlectronique', 'V√™tements'];
    const clientPrefixes = ['Mohamed', 'Ahmed', 'Fatima', 'Aicha', 'Hassan'];
    
    // Pr√©parer les requ√™tes
    const insertProduct = db.prepare(`
        INSERT OR IGNORE INTO products (barcode, name, purchase_price, price_retail, price_wholesale, price_carton, stock, alert_threshold, pieces_per_carton, category)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
    
    const insertClient = db.prepare(`
        INSERT OR IGNORE INTO clients (name, phone, address, credit_balance, ice)
        VALUES (?, ?, ?, ?, ?)
    `);
    
    // Insertion en transaction pour optimiser
    const insertProducts = db.transaction(() => {
        for (let i = 1; i <= 500; i++) {
            insertProduct.run(
                `BAR${String(i).padStart(6, '0')}`,
                `Produit Test ${i}`,
                Math.round((Math.random() * 50 + 10) * 100) / 100,
                Math.round((Math.random() * 100 + 20) * 100) / 100,
                Math.round((Math.random() * 80 + 15) * 100) / 100,
                Math.round((Math.random() * 200 + 50) * 100) / 100,
                Math.floor(Math.random() * 100),
                Math.floor(Math.random() * 10) + 5,
                Math.floor(Math.random() * 20) + 6,
                categories[i % categories.length]
            );
        }
    });
    
    const insertClients = db.transaction(() => {
        for (let i = 1; i <= 500; i++) {
            insertClient.run(
                `${clientPrefixes[i % clientPrefixes.length]} Client ${i}`,
                `06${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}`,
                `Adresse ${i}, Ville Test`,
                Math.round((Math.random() * 1000 - 500) * 100) / 100,
                `ICE${String(i).padStart(6, '0')}`
            );
        }
    });
    
    measureTime('Insertion 500 produits', insertProducts);
    measureTime('Insertion 500 clients', insertClients);
}

// Analyser les performances et donner des recommandations
function analyzePerformance(testResults) {
    console.log('\nüìà === ANALYSE DES PERFORMANCES ===\n');
    
    const slowQueries = testResults.filter(test => test.duration > 100);
    const fastQueries = testResults.filter(test => test.duration <= 50);
    
    console.log(`‚úÖ Requ√™tes rapides (‚â§50ms): ${fastQueries.length}`);
    console.log(`‚ö†Ô∏è  Requ√™tes moyennes (51-100ms): ${testResults.length - slowQueries.length - fastQueries.length}`);
    console.log(`‚ùå Requ√™tes lentes (>100ms): ${slowQueries.length}\n`);
    
    if (slowQueries.length === 0) {
        console.log('üéâ EXCELLENT ! Toutes les requ√™tes sont optimis√©es');
        console.log('‚úÖ Votre base de donn√©es peut g√©rer 1000+ √©l√©ments sans probl√®me\n');
    } else {
        console.log('üí° RECOMMANDATIONS D\'OPTIMISATION:\n');
        
        slowQueries.forEach((test, index) => {
            console.log(`${index + 1}. Optimiser la requ√™te qui prend ${test.duration}ms`);
        });
        
        console.log('\nüîß SOLUTIONS POSSIBLES:');
        console.log('   - Ajouter des index sur les colonnes fr√©quemment recherch√©es');
        console.log('   - Utiliser la pagination (LIMIT/OFFSET)');
        console.log('   - Optimiser les requ√™tes avec JOIN');
        console.log('   - Impl√©menter la recherche avec debounce c√¥t√© interface');
    }
    
    // Recommandations sp√©cifiques
    console.log('\nüéØ RECOMMANDATIONS POUR L\'INTERFACE:\n');
    console.log('‚úÖ Pagination: Afficher 50-100 √©l√©ments par page');
    console.log('‚úÖ Recherche: Debounce de 300ms minimum');
    console.log('‚úÖ Virtualisation: Pour les listes de 500+ √©l√©ments');
    console.log('‚úÖ Cache: Mettre en cache les r√©sultats fr√©quents');
}

// Test de stress avec beaucoup d'op√©rations
function stressTest() {
    console.log('\nüí™ === TEST DE STRESS ===\n');
    
    // Test d'insertion massive
    measureTime('100 insertions simultan√©es', () => {
        const insertProduct = db.prepare(`
            INSERT INTO products (barcode, name, purchase_price, price_retail, price_wholesale, price_carton, stock, alert_threshold, pieces_per_carton, category)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `);
        
        const transaction = db.transaction(() => {
            for (let i = 0; i < 100; i++) {
                insertProduct.run(
                    `STRESS${Date.now()}${i}`,
                    `Produit Stress ${i}`,
                    10, 20, 15, 50, 100, 5, 6, 'Test'
                );
            }
        });
        
        transaction();
    });
    
    // Test de lecture massive
    measureTime('100 requ√™tes de lecture', () => {
        const selectProduct = db.prepare('SELECT * FROM products WHERE id = ?');
        
        for (let i = 1; i <= 100; i++) {
            selectProduct.get(i);
        }
    });
    
    // Nettoyer les donn√©es de stress
    db.prepare('DELETE FROM products WHERE barcode LIKE ?').run('STRESS%');
}

// Fonction principale
function runDatabaseOptimizationTest() {
    try {
        // Initialiser la base de donn√©es
        db.initDatabase();
        
        // Cr√©er les index d'optimisation
        createOptimizationIndexes();
        
        // Tester les requ√™tes
        const testResults = testQueryOptimization();
        
        // Test de stress
        stressTest();
        
        // Analyser les performances
        analyzePerformance(testResults);
        
        console.log('\nüéä Test d\'optimisation termin√© avec succ√®s !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test d\'optimisation:', error);
    }
}

// Lancer le test
runDatabaseOptimizationTest();
