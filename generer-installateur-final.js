const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ G√©n√©ration de l\'installateur GestionPro v2.1.0');
console.log('=' .repeat(60));

// Fonction pour ex√©cuter des commandes avec gestion d'erreurs
function executeCommand(command, description) {
    console.log(`\nüìã ${description}...`);
    try {
        const result = execSync(command, { 
            stdio: 'inherit', 
            cwd: __dirname,
            encoding: 'utf8'
        });
        console.log(`‚úÖ ${description} - Termin√© avec succ√®s`);
        return result;
    } catch (error) {
        console.error(`‚ùå Erreur lors de ${description}:`);
        console.error(error.message);
        throw error;
    }
}

// Fonction pour v√©rifier les pr√©requis
function verifierPrerequisites() {
    console.log('\nüîç V√©rification des pr√©requis...');
    
    // V√©rifier que node_modules existe
    if (!fs.existsSync('./node_modules')) {
        console.log('üì¶ Installation des d√©pendances...');
        executeCommand('npm install', 'Installation des d√©pendances');
    }
    
    // V√©rifier que les fichiers principaux existent
    const fichiersRequis = [
        './main.js',
        './package.json',
        './src/index.html',
        './database/main.db'
    ];
    
    for (const fichier of fichiersRequis) {
        if (!fs.existsSync(fichier)) {
            throw new Error(`Fichier requis manquant: ${fichier}`);
        }
    }
    
    console.log('‚úÖ Tous les pr√©requis sont satisfaits');
}

// Fonction pour nettoyer les anciens builds
function nettoyerAnciensBuild() {
    console.log('\nüßπ Nettoyage des anciens builds...');
    
    const dossiers = ['dist', 'dist-installer', 'build'];
    
    for (const dossier of dossiers) {
        if (fs.existsSync(dossier)) {
            try {
                fs.rmSync(dossier, { recursive: true, force: true });
                console.log(`üóëÔ∏è  Supprim√©: ${dossier}`);
            } catch (error) {
                console.warn(`‚ö†Ô∏è  Impossible de supprimer ${dossier}: ${error.message}`);
            }
        }
    }
}

// Fonction pour pr√©parer les ressources
function preparerRessources() {
    console.log('\nüìÅ Pr√©paration des ressources...');
    
    // Cr√©er le dossier build s'il n'existe pas
    if (!fs.existsSync('./build')) {
        fs.mkdirSync('./build', { recursive: true });
    }
    
    // Cr√©er une ic√¥ne par d√©faut si elle n'existe pas
    const iconPath = './build/icon.ico';
    if (!fs.existsSync(iconPath)) {
        console.log('üé® Cr√©ation d\'une ic√¥ne par d√©faut...');
        // Copier une ic√¥ne par d√©faut ou en cr√©er une simple
        const iconContent = Buffer.from(''); // Ic√¥ne vide pour l'instant
        // Dans un vrai projet, vous devriez avoir une vraie ic√¥ne .ico
    }
}

// Fonction principale
async function genererInstallateur() {
    try {
        console.log('üéØ D√©but de la g√©n√©ration de l\'installateur...\n');
        
        // √âtape 1: V√©rification des pr√©requis
        verifierPrerequisites();
        
        // √âtape 2: Nettoyage
        nettoyerAnciensBuild();
        
        // √âtape 3: Pr√©paration des ressources
        preparerRessources();
        
        // √âtape 4: Construction du CSS
        executeCommand('npm run build-css', 'Construction du CSS avec Tailwind');
        
        // √âtape 5: Reconstruction des modules natifs
        executeCommand('npm run rebuild', 'Reconstruction des modules natifs');
        
        // √âtape 6: G√©n√©ration de l'installateur
        executeCommand('npm run dist', 'G√©n√©ration de l\'installateur avec Electron Builder');
        
        // √âtape 7: V√©rification du r√©sultat
        verifierResultat();
        
        console.log('\nüéâ SUCC√àS! L\'installateur a √©t√© g√©n√©r√© avec succ√®s!');
        console.log('=' .repeat(60));
        afficherInformationsInstallateur();
        
    } catch (error) {
        console.error('\nüí• ERREUR lors de la g√©n√©ration:');
        console.error(error.message);
        console.log('\nüîß Solutions possibles:');
        console.log('1. V√©rifiez que toutes les d√©pendances sont install√©es: npm install');
        console.log('2. Nettoyez le cache: npm cache clean --force');
        console.log('3. Supprimez node_modules et r√©installez: rm -rf node_modules && npm install');
        process.exit(1);
    }
}

// Fonction pour v√©rifier le r√©sultat
function verifierResultat() {
    console.log('\nüîç V√©rification du r√©sultat...');
    
    const distDir = './dist-installer';
    if (!fs.existsSync(distDir)) {
        throw new Error('Le dossier dist-installer n\'a pas √©t√© cr√©√©');
    }
    
    const files = fs.readdirSync(distDir);
    const installerFile = files.find(file => file.endsWith('.exe'));
    
    if (!installerFile) {
        throw new Error('Aucun fichier .exe trouv√© dans dist-installer');
    }
    
    const installerPath = path.join(distDir, installerFile);
    const stats = fs.statSync(installerPath);
    const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`‚úÖ Installateur g√©n√©r√©: ${installerFile}`);
    console.log(`üìè Taille: ${sizeInMB} MB`);
}

// Fonction pour afficher les informations finales
function afficherInformationsInstallateur() {
    const distDir = './dist-installer';
    const files = fs.readdirSync(distDir);
    const installerFile = files.find(file => file.endsWith('.exe'));
    
    if (installerFile) {
        const installerPath = path.resolve(distDir, installerFile);
        
        console.log('\nüì¶ INSTALLATEUR PR√äT:');
        console.log(`üìÅ Emplacement: ${installerPath}`);
        console.log(`üìã Nom du fichier: ${installerFile}`);
        
        console.log('\nüöÄ INSTRUCTIONS D\'UTILISATION:');
        console.log('1. Copiez le fichier .exe sur l\'ordinateur cible');
        console.log('2. Ex√©cutez le fichier en tant qu\'administrateur');
        console.log('3. Suivez les instructions d\'installation');
        console.log('4. L\'application sera disponible dans le menu D√©marrer');
        
        console.log('\n‚ú® FONCTIONNALIT√âS DE L\'INSTALLATEUR:');
        console.log('‚Ä¢ Installation guid√©e avec interface graphique');
        console.log('‚Ä¢ Choix du r√©pertoire d\'installation');
        console.log('‚Ä¢ Cr√©ation automatique des raccourcis bureau et menu');
        console.log('‚Ä¢ D√©sinstallation propre via le Panneau de configuration');
        console.log('‚Ä¢ Base de donn√©es incluse et configur√©e automatiquement');
    }
}

// Lancement du script
if (require.main === module) {
    genererInstallateur();
}

module.exports = { genererInstallateur };
