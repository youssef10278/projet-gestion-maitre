// test-interface-tactile.js - Tests pour l'interface tactile
// Script de validation des optimisations tactiles

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

class TouchInterfaceValidator {
    constructor() {
        this.results = {
            passed: 0,
            failed: 0,
            warnings: 0,
            details: []
        };
    }

    async runAllTests() {
        console.log('üß™ D√©marrage des tests d\'interface tactile...\n');

        // Tests des fichiers
        this.testFileStructure();
        this.testCSSOptimizations();
        this.testHTMLStructure();
        this.testJavaScriptIntegration();

        // Tests de configuration
        this.testResponsiveDesign();
        this.testAccessibility();
        this.testPerformance();

        // Afficher les r√©sultats
        this.displayResults();
    }

    testFileStructure() {
        console.log('üìÅ Test de la structure des fichiers...');

        const requiredFiles = [
            'src/css/input.css',
            'src/js/touch-interface.js',
            'src/caisse.html',
            'GUIDE-CAISSE-TACTILE.md'
        ];

        requiredFiles.forEach(file => {
            const filePath = path.join(__dirname, file);
            if (fs.existsSync(filePath)) {
                this.pass(`‚úÖ Fichier trouv√©: ${file}`);
            } else {
                this.fail(`‚ùå Fichier manquant: ${file}`);
            }
        });
    }

    testCSSOptimizations() {
        console.log('\nüé® Test des optimisations CSS...');

        const cssPath = path.join(__dirname, 'src/css/input.css');
        if (!fs.existsSync(cssPath)) {
            this.fail('‚ùå Fichier CSS principal manquant');
            return;
        }

        const cssContent = fs.readFileSync(cssPath, 'utf8');

        // Test des variables CSS tactiles
        const requiredVariables = [
            '--touch-target-min',
            '--touch-spacing',
            '--touch-feedback-duration'
        ];

        requiredVariables.forEach(variable => {
            if (cssContent.includes(variable)) {
                this.pass(`‚úÖ Variable CSS trouv√©e: ${variable}`);
            } else {
                this.fail(`‚ùå Variable CSS manquante: ${variable}`);
            }
        });

        // Test des media queries tactiles
        const touchMediaQuery = '@media (hover: none) and (pointer: coarse)';
        if (cssContent.includes(touchMediaQuery)) {
            this.pass('‚úÖ Media query tactile trouv√©e');
        } else {
            this.fail('‚ùå Media query tactile manquante');
        }

        // Test des classes tactiles
        const requiredClasses = [
            '.touch-target',
            '.touch-feedback',
            '.touch-active',
            '.interactive-element'
        ];

        requiredClasses.forEach(className => {
            if (cssContent.includes(className)) {
                this.pass(`‚úÖ Classe CSS trouv√©e: ${className}`);
            } else {
                this.fail(`‚ùå Classe CSS manquante: ${className}`);
            }
        });

        // Test des tailles minimales
        if (cssContent.includes('min-height: var(--touch-target-min)')) {
            this.pass('‚úÖ Tailles minimales tactiles configur√©es');
        } else {
            this.warn('‚ö†Ô∏è Tailles minimales tactiles non trouv√©es');
        }
    }

    testHTMLStructure() {
        console.log('\nüìÑ Test de la structure HTML...');

        const htmlPath = path.join(__dirname, 'src/caisse.html');
        if (!fs.existsSync(htmlPath)) {
            this.fail('‚ùå Fichier HTML principal manquant');
            return;
        }

        const htmlContent = fs.readFileSync(htmlPath, 'utf8');

        // Test des classes tactiles dans le HTML
        const requiredClasses = [
            'touch-target',
            'touch-feedback',
            'interactive-element',
            'main-container',
            'landscape-optimized'
        ];

        requiredClasses.forEach(className => {
            if (htmlContent.includes(className)) {
                this.pass(`‚úÖ Classe HTML trouv√©e: ${className}`);
            } else {
                this.warn(`‚ö†Ô∏è Classe HTML non trouv√©e: ${className}`);
            }
        });

        // Test de l'inclusion du script tactile
        if (htmlContent.includes('touch-interface.js')) {
            this.pass('‚úÖ Script tactile inclus dans le HTML');
        } else {
            this.fail('‚ùå Script tactile non inclus dans le HTML');
        }

        // Test de la meta viewport
        if (htmlContent.includes('viewport')) {
            this.pass('‚úÖ Meta viewport trouv√©e');
        } else {
            this.fail('‚ùå Meta viewport manquante');
        }

        // Test des boutons de paiement optimis√©s
        const paymentButtons = [
            'validate-payment-btn',
            'cancel-sale-btn',
            'cash-payment-btn'
        ];

        paymentButtons.forEach(buttonId => {
            if (htmlContent.includes(buttonId)) {
                this.pass(`‚úÖ Bouton de paiement trouv√©: ${buttonId}`);
            } else {
                this.warn(`‚ö†Ô∏è Bouton de paiement non trouv√©: ${buttonId}`);
            }
        });
    }

    testJavaScriptIntegration() {
        console.log('\n‚öôÔ∏è Test de l\'int√©gration JavaScript...');

        const jsPath = path.join(__dirname, 'src/js/touch-interface.js');
        if (!fs.existsSync(jsPath)) {
            this.fail('‚ùå Fichier JavaScript tactile manquant');
            return;
        }

        const jsContent = fs.readFileSync(jsPath, 'utf8');

        // Test de la classe principale
        if (jsContent.includes('class TouchInterface')) {
            this.pass('‚úÖ Classe TouchInterface trouv√©e');
        } else {
            this.fail('‚ùå Classe TouchInterface manquante');
        }

        // Test des m√©thodes essentielles
        const requiredMethods = [
            'detectTouchDevice',
            'handleTouchStart',
            'handleTouchEnd',
            'handleLongPress',
            'initTouchHandlers'
        ];

        requiredMethods.forEach(method => {
            if (jsContent.includes(method)) {
                this.pass(`‚úÖ M√©thode trouv√©e: ${method}`);
            } else {
                this.fail(`‚ùå M√©thode manquante: ${method}`);
            }
        });

        // Test de la d√©tection tactile
        if (jsContent.includes('ontouchstart')) {
            this.pass('‚úÖ D√©tection tactile impl√©ment√©e');
        } else {
            this.fail('‚ùå D√©tection tactile manquante');
        }

        // Test du feedback haptique
        if (jsContent.includes('navigator.vibrate')) {
            this.pass('‚úÖ Feedback haptique impl√©ment√©');
        } else {
            this.warn('‚ö†Ô∏è Feedback haptique non trouv√©');
        }
    }

    testResponsiveDesign() {
        console.log('\nüì± Test du design responsive...');

        const cssPath = path.join(__dirname, 'src/css/input.css');
        if (!fs.existsSync(cssPath)) return;

        const cssContent = fs.readFileSync(cssPath, 'utf8');

        // Test des breakpoints
        const breakpoints = [
            '@media (min-width: 768px)',
            '@media (max-width: 767px)',
            '@media (orientation: landscape)',
            '@media (orientation: portrait)'
        ];

        breakpoints.forEach(breakpoint => {
            if (cssContent.includes(breakpoint)) {
                this.pass(`‚úÖ Breakpoint trouv√©: ${breakpoint}`);
            } else {
                this.warn(`‚ö†Ô∏è Breakpoint non trouv√©: ${breakpoint}`);
            }
        });

        // Test des adaptations sp√©cifiques
        if (cssContent.includes('keyboard-open')) {
            this.pass('‚úÖ Gestion clavier virtuel trouv√©e');
        } else {
            this.warn('‚ö†Ô∏è Gestion clavier virtuel non trouv√©e');
        }
    }

    testAccessibility() {
        console.log('\n‚ôø Test de l\'accessibilit√©...');

        const jsPath = path.join(__dirname, 'src/js/touch-interface.js');
        if (!fs.existsSync(jsPath)) return;

        const jsContent = fs.readFileSync(jsPath, 'utf8');

        // Test des am√©liorations d'accessibilit√©
        if (jsContent.includes('initAccessibility')) {
            this.pass('‚úÖ Initialisation accessibilit√© trouv√©e');
        } else {
            this.warn('‚ö†Ô∏è Initialisation accessibilit√© non trouv√©e');
        }

        if (jsContent.includes('focusin') && jsContent.includes('focusout')) {
            this.pass('‚úÖ Gestion du focus impl√©ment√©e');
        } else {
            this.warn('‚ö†Ô∏è Gestion du focus non trouv√©e');
        }

        // Test des outlines
        const cssPath = path.join(__dirname, 'src/css/input.css');
        if (fs.existsSync(cssPath)) {
            const cssContent = fs.readFileSync(cssPath, 'utf8');
            if (cssContent.includes('outline:') || cssContent.includes('focus:')) {
                this.pass('‚úÖ Styles de focus trouv√©s');
            } else {
                this.warn('‚ö†Ô∏è Styles de focus non trouv√©s');
            }
        }
    }

    testPerformance() {
        console.log('\n‚ö° Test des optimisations de performance...');

        const jsPath = path.join(__dirname, 'src/js/touch-interface.js');
        if (!fs.existsSync(jsPath)) return;

        const jsContent = fs.readFileSync(jsPath, 'utf8');

        // Test des optimisations
        if (jsContent.includes('passive: true') || jsContent.includes('passive: false')) {
            this.pass('‚úÖ √âv√©nements passifs configur√©s');
        } else {
            this.warn('‚ö†Ô∏è Configuration √©v√©nements passifs non trouv√©e');
        }

        if (jsContent.includes('debounce') || jsContent.includes('throttle')) {
            this.pass('‚úÖ Optimisations de fr√©quence trouv√©es');
        } else {
            this.warn('‚ö†Ô∏è Optimisations de fr√©quence non trouv√©es');
        }

        if (jsContent.includes('MutationObserver')) {
            this.pass('‚úÖ Observer pour contenu dynamique trouv√©');
        } else {
            this.warn('‚ö†Ô∏è Observer pour contenu dynamique non trouv√©');
        }
    }

    pass(message) {
        this.results.passed++;
        this.results.details.push({ type: 'pass', message });
        console.log(message);
    }

    fail(message) {
        this.results.failed++;
        this.results.details.push({ type: 'fail', message });
        console.log(message);
    }

    warn(message) {
        this.results.warnings++;
        this.results.details.push({ type: 'warn', message });
        console.log(message);
    }

    displayResults() {
        console.log('\n' + '='.repeat(60));
        console.log('üìä R√âSULTATS DES TESTS');
        console.log('='.repeat(60));
        console.log(`‚úÖ Tests r√©ussis: ${this.results.passed}`);
        console.log(`‚ùå Tests √©chou√©s: ${this.results.failed}`);
        console.log(`‚ö†Ô∏è  Avertissements: ${this.results.warnings}`);
        console.log(`üìà Score: ${this.calculateScore()}%`);

        if (this.results.failed > 0) {
            console.log('\nüîß Actions recommand√©es:');
            this.results.details
                .filter(detail => detail.type === 'fail')
                .forEach(detail => console.log(`   - ${detail.message.replace('‚ùå ', '')}`));
        }

        if (this.results.warnings > 0) {
            console.log('\nüí° Am√©liorations sugg√©r√©es:');
            this.results.details
                .filter(detail => detail.type === 'warn')
                .forEach(detail => console.log(`   - ${detail.message.replace('‚ö†Ô∏è ', '')}`));
        }

        console.log('\nüéØ Interface tactile ' + 
            (this.results.failed === 0 ? 'PR√äTE' : 'N√âCESSITE DES CORRECTIONS'));
    }

    calculateScore() {
        const total = this.results.passed + this.results.failed + this.results.warnings;
        if (total === 0) return 0;
        
        const weighted = this.results.passed + (this.results.warnings * 0.5);
        return Math.round((weighted / total) * 100);
    }
}

// Ex√©cution des tests
if (require.main === module) {
    const validator = new TouchInterfaceValidator();
    validator.runAllTests().catch(console.error);
}

module.exports = TouchInterfaceValidator;
