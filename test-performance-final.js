// Test de performance final - Version corrig√©e
const dbModule = require('./database.js');

console.log('üöÄ === TEST DE PERFORMANCE GESTIONPRO (FINAL) ===');
console.log('üìä Test de performance avec donn√©es r√©elles\n');

// Fonction pour mesurer le temps d'ex√©cution
function measureTime(label, fn) {
    const start = Date.now();
    try {
        const result = fn();
        const end = Date.now();
        const duration = end - start;
        console.log(`‚è±Ô∏è  ${label}: ${duration}ms`);
        return { result, duration, success: true };
    } catch (error) {
        const end = Date.now();
        const duration = end - start;
        console.log(`‚ùå ${label}: ERREUR (${duration}ms) - ${error.message}`);
        return { result: null, duration, success: false, error: error.message };
    }
}

// Test de lecture des donn√©es existantes
function testDataRetrieval() {
    console.log('üîç === TEST LECTURE DONN√âES EXISTANTES ===\n');
    
    const results = {};
    
    // Test r√©cup√©ration de tous les produits
    results.allProducts = measureTime('R√©cup√©ration tous les produits', () => {
        return dbModule.productDB.getAll();
    });
    
    // Test r√©cup√©ration de tous les clients
    results.allClients = measureTime('R√©cup√©ration tous les clients', () => {
        return dbModule.clientDB.getAll();
    });
    
    // Test r√©cup√©ration des cat√©gories
    results.categories = measureTime('R√©cup√©ration des cat√©gories', () => {
        return dbModule.productDB.getCategories();
    });
    
    // Test produits en rupture de stock
    results.lowStock = measureTime('Produits en rupture de stock', () => {
        return dbModule.productDB.getLowStock();
    });
    
    // Test d√©biteurs
    results.debtors = measureTime('Clients d√©biteurs', () => {
        return dbModule.creditsDB.getDebtors();
    });
    
    // Test historique des ventes
    results.salesHistory = measureTime('Historique des ventes', () => {
        return dbModule.salesDB.getHistory();
    });
    
    if (results.allProducts.success && results.allClients.success) {
        console.log(`üìä Donn√©es actuelles:`);
        console.log(`   - Produits: ${results.allProducts.result.length}`);
        console.log(`   - Clients: ${results.allClients.result.length}`);
        console.log(`   - Cat√©gories: ${results.categories.success ? results.categories.result.length : 'Erreur'}`);
        console.log(`   - Produits en rupture: ${results.lowStock.success ? results.lowStock.result.length : 'Erreur'}`);
        console.log(`   - Clients d√©biteurs: ${results.debtors.success ? results.debtors.result.length : 'Erreur'}`);
        console.log(`   - Ventes historiques: ${results.salesHistory.success ? results.salesHistory.result.length : 'Erreur'}\n`);
    }
    
    return results;
}

// G√©n√©rer et ins√©rer des donn√©es de test
function generateAndInsertTestData() {
    console.log('üìù === G√âN√âRATION DONN√âES DE TEST ===\n');
    
    const results = {};
    
    // G√©n√©rer 100 produits de test
    const products = [];
    for (let i = 1; i <= 100; i++) {
        products.push({
            barcode: `PERF${String(i).padStart(6, '0')}`,
            name: `Produit Performance ${i}`,
            purchase_price: Math.round((Math.random() * 50 + 10) * 100) / 100,
            price_retail: Math.round((Math.random() * 100 + 20) * 100) / 100,
            price_wholesale: Math.round((Math.random() * 80 + 15) * 100) / 100,
            price_carton: Math.round((Math.random() * 200 + 50) * 100) / 100,
            stock: Math.floor(Math.random() * 100),
            alert_threshold: Math.floor(Math.random() * 10) + 5,
            pieces_per_carton: Math.floor(Math.random() * 20) + 6,
            category: ['Alimentaire', 'Boissons', 'Hygi√®ne', '√âlectronique'][i % 4]
        });
    }
    
    // Ins√©rer les produits
    let productSuccessCount = 0;
    results.productInsertion = measureTime('Insertion 100 produits', () => {
        products.forEach(product => {
            try {
                dbModule.productDB.add(product);
                productSuccessCount++;
            } catch (error) {
                // Ignorer les doublons
                if (!error.message.includes('UNIQUE constraint failed')) {
                    throw error;
                }
            }
        });
        return productSuccessCount;
    });
    
    // G√©n√©rer 100 clients de test
    const clients = [];
    for (let i = 1; i <= 100; i++) {
        clients.push({
            name: `Client Performance ${i}`,
            phone: `06${String(Math.floor(Math.random() * 100000000)).padStart(8, '0')}`,
            address: `Adresse Performance ${i}`,
            credit_balance: Math.round((Math.random() * 1000 - 500) * 100) / 100,
            ice: `PERFICE${String(i).padStart(6, '0')}`
        });
    }
    
    // Ins√©rer les clients
    let clientSuccessCount = 0;
    results.clientInsertion = measureTime('Insertion 100 clients', () => {
        clients.forEach(client => {
            try {
                dbModule.clientDB.add(client);
                clientSuccessCount++;
            } catch (error) {
                // Ignorer les doublons
                if (!error.message.includes('UNIQUE constraint failed')) {
                    throw error;
                }
            }
        });
        return clientSuccessCount;
    });
    
    console.log(`‚úÖ Donn√©es g√©n√©r√©es:`);
    console.log(`   - Produits ajout√©s: ${productSuccessCount}/100`);
    console.log(`   - Clients ajout√©s: ${clientSuccessCount}/100\n`);
    
    return results;
}

// Test de recherche et filtrage
function testSearchAndFiltering() {
    console.log('üîç === TEST RECHERCHE ET FILTRAGE ===\n');
    
    const results = {};
    
    // R√©cup√©rer tous les produits pour les tests de filtrage
    const allProducts = dbModule.productDB.getAll();
    const allClients = dbModule.clientDB.getAll();
    
    if (allProducts.length === 0 || allClients.length === 0) {
        console.log('‚ö†Ô∏è  Pas assez de donn√©es pour les tests de recherche\n');
        return results;
    }
    
    // Test de filtrage par cat√©gorie (simulation c√¥t√© client)
    results.categoryFilter = measureTime('Filtrage par cat√©gorie (c√¥t√© client)', () => {
        return allProducts.filter(p => p.category === 'Alimentaire');
    });
    
    // Test de recherche par nom (simulation c√¥t√© client)
    results.nameSearch = measureTime('Recherche par nom (c√¥t√© client)', () => {
        return allProducts.filter(p => p.name.toLowerCase().includes('performance'));
    });
    
    // Test de filtrage des clients avec cr√©dit
    results.creditFilter = measureTime('Filtrage clients avec cr√©dit', () => {
        return allClients.filter(c => c.credit_balance > 0);
    });
    
    // Test de tri par prix
    results.priceSort = measureTime('Tri par prix (c√¥t√© client)', () => {
        return [...allProducts].sort((a, b) => b.price_retail - a.price_retail);
    });
    
    console.log(`üìä R√©sultats de recherche:`);
    console.log(`   - Produits alimentaires: ${results.categoryFilter.success ? results.categoryFilter.result.length : 'Erreur'}`);
    console.log(`   - Recherche "performance": ${results.nameSearch.success ? results.nameSearch.result.length : 'Erreur'}`);
    console.log(`   - Clients avec cr√©dit: ${results.creditFilter.success ? results.creditFilter.result.length : 'Erreur'}\n`);
    
    return results;
}

// Test de simulation d'utilisation r√©elle
function testRealUsageSimulation() {
    console.log('üéÆ === SIMULATION UTILISATION R√âELLE ===\n');
    
    const results = {};
    
    // Simulation: Chargement de la page produits
    results.loadProductsPage = measureTime('Chargement page produits', () => {
        const products = dbModule.productDB.getAll();
        const categories = dbModule.productDB.getCategories();
        const lowStock = dbModule.productDB.getLowStock();
        return { products, categories, lowStock };
    });
    
    // Simulation: Chargement de la page clients
    results.loadClientsPage = measureTime('Chargement page clients', () => {
        const clients = dbModule.clientDB.getAll();
        const debtors = dbModule.creditsDB.getDebtors();
        return { clients, debtors };
    });
    
    // Simulation: Chargement de la page historique
    results.loadHistoryPage = measureTime('Chargement page historique', () => {
        const history = dbModule.salesDB.getHistory();
        return { history };
    });
    
    console.log(`üìä Simulation d'utilisation termin√©e\n`);
    
    return results;
}

// Analyser les performances globales
function analyzeGlobalPerformance(allResults) {
    console.log('üéØ === ANALYSE GLOBALE DES PERFORMANCES ===\n');
    
    const allDurations = [];
    const slowOperations = [];
    const fastOperations = [];
    
    // Collecter toutes les dur√©es
    Object.values(allResults).forEach(category => {
        if (typeof category === 'object') {
            Object.entries(category).forEach(([key, test]) => {
                if (test && typeof test.duration === 'number') {
                    allDurations.push(test.duration);
                    
                    if (test.duration > 500) {
                        slowOperations.push({ name: key, duration: test.duration });
                    } else if (test.duration <= 100) {
                        fastOperations.push({ name: key, duration: test.duration });
                    }
                }
            });
        }
    });
    
    if (allDurations.length === 0) {
        console.log('‚ùå Aucune donn√©e de performance √† analyser\n');
        return;
    }
    
    const maxTime = Math.max(...allDurations);
    const minTime = Math.min(...allDurations);
    const avgTime = allDurations.reduce((a, b) => a + b, 0) / allDurations.length;
    
    console.log(`üìä Statistiques globales:`);
    console.log(`   - Op√©rations test√©es: ${allDurations.length}`);
    console.log(`   - Temps minimum: ${minTime}ms`);
    console.log(`   - Temps maximum: ${maxTime}ms`);
    console.log(`   - Temps moyen: ${Math.round(avgTime)}ms\n`);
    
    console.log(`‚ö° Op√©rations rapides (‚â§100ms): ${fastOperations.length}`);
    console.log(`‚ö†Ô∏è  Op√©rations lentes (>500ms): ${slowOperations.length}\n`);
    
    // √âvaluation finale
    if (maxTime <= 200) {
        console.log('üéâ EXCELLENT ! Performances optimales');
        console.log('‚úÖ Votre logiciel peut facilement g√©rer 1000+ √©l√©ments');
        console.log('üöÄ Aucune optimisation n√©cessaire\n');
    } else if (maxTime <= 500) {
        console.log('‚úÖ TR√àS BON ! Performances acceptables');
        console.log('üí° Votre logiciel peut g√©rer 1000+ √©l√©ments');
        console.log('üîß Quelques optimisations mineures recommand√©es\n');
    } else if (maxTime <= 1000) {
        console.log('‚ö†Ô∏è  BON ! Performances correctes');
        console.log('üîß Optimisations recommand√©es pour 1000+ √©l√©ments');
        console.log('üí° Impl√©mentez la pagination et la recherche optimis√©e\n');
    } else {
        console.log('‚ùå ATTENTION ! Performances √† am√©liorer');
        console.log('üö® Optimisations n√©cessaires avant 1000+ √©l√©ments');
        console.log('üîß Impl√©mentez pagination, index et cache\n');
    }
    
    // Recommandations sp√©cifiques
    console.log('üí° RECOMMANDATIONS POUR 1000+ √âL√âMENTS:\n');
    
    console.log('üé® Interface utilisateur:');
    console.log('   ‚úÖ Pagination: 50-100 √©l√©ments par page');
    console.log('   ‚úÖ Recherche: Debounce 300ms + minimum 2 caract√®res');
    console.log('   ‚úÖ Virtualisation: Pour listes tr√®s longues');
    console.log('   ‚úÖ Loading states: Indicateurs de chargement\n');
    
    console.log('üóÑÔ∏è  Base de donn√©es:');
    console.log('   ‚úÖ Index: Sur colonnes name, barcode, category');
    console.log('   ‚úÖ Requ√™tes: LIMIT pour grandes listes');
    console.log('   ‚úÖ Cache: R√©sultats fr√©quents en m√©moire');
    console.log('   ‚úÖ Nettoyage: Archiver anciennes donn√©es\n');
    
    if (slowOperations.length > 0) {
        console.log('üîß Op√©rations √† optimiser en priorit√©:');
        slowOperations.forEach(op => {
            console.log(`   - ${op.name}: ${op.duration}ms`);
        });
        console.log();
    }
}

// Fonction principale
async function runFinalPerformanceTest() {
    try {
        console.log('üîß Initialisation de la base de donn√©es...');
        dbModule.initDatabase();
        console.log('‚úÖ Base de donn√©es initialis√©e\n');
        
        // Tests de lecture des donn√©es existantes
        const retrievalResults = testDataRetrieval();
        
        // G√©n√©ration et insertion de donn√©es de test
        const insertionResults = generateAndInsertTestData();
        
        // Tests de recherche et filtrage
        const searchResults = testSearchAndFiltering();
        
        // Simulation d'utilisation r√©elle
        const usageResults = testRealUsageSimulation();
        
        // Analyse globale
        const allResults = {
            retrieval: retrievalResults,
            insertion: insertionResults,
            search: searchResults,
            usage: usageResults
        };
        
        analyzeGlobalPerformance(allResults);
        
        console.log('üéä Test de performance termin√© avec succ√®s !');
        console.log('üìã Consultez les recommandations ci-dessus pour optimiser votre logiciel');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test de performance:', error);
    }
}

// Lancer le test
runFinalPerformanceTest();
